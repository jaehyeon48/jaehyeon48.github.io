{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/event-bubbling-and-capturing/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"251f3cd2-a17e-5603-9a25-c84e1d89d2fa","excerpt":"…","html":"<h2 id=\"이벤트-버블링\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B2%84%EB%B8%94%EB%A7%81\" aria-label=\"이벤트 버블링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 버블링</h2>\n<ul>\n<li>이벤트 버블링이란, 어떤 요소에 대해 특정 이벤트가 발생했을 때 해당 이벤트가 상위 부모 요소들로 전달되는 특성을 의미한다. 즉, 우선 해당 요소의 (해당 이벤트에 대한) 이벤트 핸들러를 호출하고, 그 다음으로 상위 요소(부모)의 이벤트 핸들러를 호출하고, 그 다음 상위 요소의 이벤트를 호출하고, … 이런 식으로 동작하게 된다.</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/event-bubbling-and-capturing/event_bubbling.png\" alt=\"Event Bubbling\">\n    <figcaption>출처: https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/</figcaption>\n</figure>\n<ul>\n<li><a href=\"https://codepen.io/jaehyeon48/pen/WNOMQzj\">이벤트 버블링 예시</a></li>\n</ul>\n<h3 id=\"버블링-멈추기\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81-%EB%A9%88%EC%B6%94%EA%B8%B0\" aria-label=\"버블링 멈추기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버블링 멈추기</h3>\n<ul>\n<li>일반적으로 이벤트 버블링은 타겟 요소로 부터 <code class=\"language-text\">&lt;html></code> 요소를 거쳐 <code class=\"language-text\">document</code> 객체까지, 심지어 몇몇 이벤트들은 <code class=\"language-text\">window</code> 객체까지 전달된다.</li>\n<li>이 떄, 이벤트 핸들러는 <code class=\"language-text\">event.stopPropagation()</code>함수를 이용하여 버블링을 중단할 수 있다. <a href=\"https://jsfiddle.net/jaehyeon48/xg5u1h9b/5/\">예제</a></li>\n<li>다만, <code class=\"language-text\">event.stopPropagation()</code>을 사용하더라도 특정 요소에 여러 개의 핸들러가 존재하는 경우, 해당 핸들러 들은 여전히 실행된다. 이것을 막기 위해선 <code class=\"language-text\">event.stopImmediatePropagation()</code>을 사용할 수 있다. <a href=\"https://jsfiddle.net/jaehyeon48/8073fk5g/13/\">예제</a></li>\n</ul>\n<h2 id=\"이벤트-캡처링\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%BA%A1%EC%B2%98%EB%A7%81\" aria-label=\"이벤트 캡처링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 캡처링</h2>\n<ul>\n<li>이벤트 캡처링은 버블링과 반대 방향으로 일어나는 전파 방식으로, 실제 코드에서 잘 쓰이지는 않지만 때때로 유용하게 사용될 수 있다.</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/event-bubbling-and-capturing/event_capturing.png\" alt=\"Event Capturing\">\n    <figcaption>출처: https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/</figcaption>\n</figure>\n<h2 id=\"표준-dom-이벤트\" style=\"position:relative;\"><a href=\"#%ED%91%9C%EC%A4%80-dom-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"표준 dom 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표준 DOM 이벤트</h2>\n<ul>\n<li>\n<p><a href=\"https://www.w3.org/TR/DOM-Level-3-Events/\">표준 DOM 이벤트 스펙</a>에선 이벤트 흐름을 다음 3 단계로 정의하고 있다:</p>\n<ol>\n<li><strong>캡쳐링 단계</strong>: 이벤트가 하위 요소로 전파되는 단계.</li>\n<li><strong>타겟 단계</strong>: 이벤트가 타겟 요소에 도달한 단계.</li>\n<li><strong>버블링 단계</strong>: 이벤트가 상위 요소로 버블링 되는 단계.</li>\n</ol>\n</li>\n<li>아래 그림을 통해 <code class=\"language-text\">&lt;table></code> 안에 있는 <code class=\"language-text\">&lt;td></code> 를 클릭하게 되면 어떤 일이 일어나는지 살펴보자:</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/event-bubbling-and-capturing/event_dispatch.png\" alt=\"Event Dispatch\">\n    <figcaption>출처: https://www.w3.org/TR/DOM-Level-3-Events/</figcaption>\n</figure>\n<ul>\n<li>우선, <code class=\"language-text\">&lt;td></code> 를 클릭하게 되면 이벤트가 최상위 조상 요소부터 시작하여 아래로 전파되고(⟶ 캡처링 단계), 타겟 요소에 도달하여 발생시킨 후(⟶ 타겟 단계), 다시 위로 올라가면서(⟶ 버블링 단계) 각 요소들의 핸들러를 호출한다.</li>\n<li>사실 캡처링이 활용되는 경우는 드물다.</li>\n<li>이벤트 캡쳐링 단계를 포착하기 위해선 다음과 같이 리스너를 등록할 때 <code class=\"language-text\">capture</code> 인자를 추가적으로 전달해야 한다:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> capture<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 혹은</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">capture</code> 옵션이 <code class=\"language-text\">false</code>인 경우, 핸들러는 버블링 단계에서 동작한다. 이 값이 default 이다.</li>\n<li><code class=\"language-text\">capture</code> 옵션이 <code class=\"language-text\">true</code>인 경우, 핸들러는 캡쳐링 단계에서 동작한다.</li>\n<li>공식적으로는 이벤트 흐름에 총 3단계가 있지만 2번째 단계인 타겟 단계는 따로 처리되지 않는다. 캡쳐링과 버블링 단계의 핸들러는 실제로 이 타겟 단계에서 trigger 된다.</li>\n<li><a href=\"https://jsfiddle.net/oz16g4mb/6/\">예시</a></li>\n</ul>\n<h2 id=\"이벤트-위임\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84\" aria-label=\"이벤트 위임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 위임</h2>\n<ul>\n<li>추가 예정…</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://javascript.info/bubbling-and-capturing\">https://javascript.info/bubbling-and-capturing</a></p>\n<p><a href=\"https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/\">https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/</a></p>","frontmatter":{"title":"이벤트 버블링과 캡처링","date":"December 11, 2021","category":"javascript"}}},"pageContext":{"slug":"/javascript/event-bubbling-and-capturing/","previous":{"fields":{"slug":"/architecture/refactoring_summary_2/"},"frontmatter":{"title":"리팩토링 2판 요약 정리 Ch.2"}},"next":{"fields":{"slug":"/architecture/refactoring_summary_3/"},"frontmatter":{"title":"리팩토링 2판 요약 정리 Ch.3"}}}},"staticQueryHashes":[]}