{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/max-values/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"5ddd579b-601c-57a9-b28d-5cbebe051710","excerpt":"IEEE 754에 대해 잘 모르시는 분들은 컴퓨터는 어떻게 숫자를 표현하는가를 보고 오시는 것을 추천합니다! Number.MAX_SAFE_INTEGER 우선, 자바스크립트에서 “안전”하게 정수를 표현할 수 있는 최대값이 왜  ()인가에 대해 알아봅시다. 이때 “안전”하다는 말은 정수를 정확하게 나타낼 수 있고, 올바르게 값을 비교할 수 있다는 의미입니다. 다들 아시다시피 자바스크립트의  타입은 IEEE 754 Double Precision 형식을 사용하여 숫자를 나타냅니다. 이때 mantissa…","html":"<p><a href=\"https://en.wikipedia.org/wiki/IEEE_754\" target=\"_blank\" rel=\"noreferrer noopener\">IEEE 754</a>에 대해 잘 모르시는 분들은 <a href=\"https://jaehyeon48.github.io/computer-architecture/how-computers-represent-numbers/\" target=\"_blank\" rel=\"noreferrer noopener\">컴퓨터는 어떻게 숫자를 표현하는가</a>를 보고 오시는 것을 추천합니다!</p>\n<h2 id=\"numbermax_safe_integer\" style=\"position:relative;\"><a href=\"#numbermax_safe_integer\" aria-label=\"numbermax_safe_integer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Number.MAX_SAFE_INTEGER</h2>\n<p>우선, 자바스크립트에서 “안전”하게 정수를 표현할 수 있는 최대값이 왜 <code class=\"language-text\">9007199254740991</code> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{53}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>)인가에 대해 알아봅시다. 이때 “안전”하다는 말은 <strong>정수를 정확하게 나타낼 수 있고, 올바르게 값을 비교할 수 있다</strong>는 의미입니다.</p>\n<p>다들 아시다시피 자바스크립트의 <code class=\"language-text\">Number</code> 타입은 <a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\" target=\"_blank\" rel=\"noreferrer noopener\">IEEE 754 Double Precision</a> 형식을 사용하여 숫자를 나타냅니다. 이때 mantissa가 최대 52비트 이므로 정수를 “안전”하게 표현할 수 있는 최대값은 이 mantissa가 모두 1로 채워진 경우입니다. 이를 정규화된 형식으로 표현하면:</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/max-values/max_safe_integer.png\" alt=\"JavaScript max safe integer\">\n    <figcaption>MAX_SAFE_INTEGER 값을 구하는 과정</figcaption>\n</figure>\n<p>위 그림과 같은 방식으로 추론하면 왜 <code class=\"language-text\">MAX_SAFE_INTEGER</code> 값이 (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{53}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>)인지 알 수 있습니다.</p>\n<p>그럼 <code class=\"language-text\">MAX_SAFE_INTEGER</code> 값에 1을 더하면 어떻게 될까요?</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/max-values/max_safe_integer_plus_one.png\" alt=\"JavaScript max safe integer plus one\">\n    <figcaption>MAX_SAFE_INTEGER + 1</figcaption>\n</figure>\n<p>위와 같이, 모든 mantissa의 수가 자리올림 되어 0으로 바뀌고 exponent가 52에서 53으로 증가하게 됩니다. 따라서 <code class=\"language-text\">MAX_SAFE_INTEGER + 1</code>의 값은 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{53}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span>이 되는 것이죠.</p>\n<p>하지만 이제부터 재미있는 일이 일어나기 시작합니다. <code class=\"language-text\">MAX_SAFE_INTEGER + 1</code>보다 큰 값은 2씩 증가하고, 홀수는 표현할 수 없게 되는 것이죠:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">input<span class=\"token operator\">:</span> <span class=\"token number\">9007199254740992</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>  output<span class=\"token operator\">:</span> <span class=\"token number\">9007199254740992</span>  <span class=\"token comment\">// expected: 9007199254740993</span>\ninput<span class=\"token operator\">:</span> <span class=\"token number\">9007199254740992</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>  output<span class=\"token operator\">:</span> <span class=\"token number\">9007199254740994</span>  <span class=\"token comment\">// expected: 9007199254740994</span>\ninput<span class=\"token operator\">:</span> <span class=\"token number\">9007199254740992</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span>  output<span class=\"token operator\">:</span> <span class=\"token number\">9007199254740996</span>  <span class=\"token comment\">// expected: 9007199254740995</span>\ninput<span class=\"token operator\">:</span> <span class=\"token number\">9007199254740992</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span>  output<span class=\"token operator\">:</span> <span class=\"token number\">9007199254740996</span>  <span class=\"token comment\">// expected: 9007199254740996</span></code></pre></div>\n<p>이는 다음 그림을 통해 설명할 수 있습니다:</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/max-values/larger_than_max_safe_integer_plus_one.png\" alt=\"JavaScript larger than max safe integer plus one\">\n    <figcaption>MAX_SAFE_INTEGER + 1 보다 큰 수</figcaption>\n</figure>\n<p>위 그림처럼, <code class=\"language-text\">MAX_SAFE_INTEGER + 1</code> 보다 큰 수는 exponent값이 53 이상이므로 소수점을 (mantissa의) 52비트 만큼 이동시키고 나서도 여분의 2의 제곱꼴이 남아있게 됩니다. 이 때문에 1을 더한다고 해도 남아있는 2의 제곱꼴로 인해 실제론 2의 제곱꼴씩 증가하게 되는 것이죠.</p>\n<p>위 그림에선 2가 남아있게 되었지만 수가 더욱 커지면 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> 등의 수가 남아있게 됩니다. 예를 들어 9,007,199,254,740,992 * 2 = 18,014,398,509,481,984보다 큰 수의 경우 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>가 남아있게 되어 수가 4씩 증가함을 알 수 있습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">input<span class=\"token operator\">:</span> <span class=\"token number\">18014398509481984</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>  output<span class=\"token operator\">:</span> <span class=\"token number\">18014398509481984</span>  <span class=\"token comment\">// expected: 18014398509481985</span>\ninput<span class=\"token operator\">:</span> <span class=\"token number\">18014398509481984</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>  output<span class=\"token operator\">:</span> <span class=\"token number\">18014398509481984</span>  <span class=\"token comment\">// expected: 18014398509481986</span>\ninput<span class=\"token operator\">:</span> <span class=\"token number\">18014398509481984</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span>  output<span class=\"token operator\">:</span> <span class=\"token number\">18014398509481984</span>  <span class=\"token comment\">// expected: 18014398509481987</span>\ninput<span class=\"token operator\">:</span> <span class=\"token number\">18014398509481984</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span>  output<span class=\"token operator\">:</span> <span class=\"token number\">18014398509481988</span>  <span class=\"token comment\">// expected: 18014398509481988</span></code></pre></div>\n<h2 id=\"numbermax_value\" style=\"position:relative;\"><a href=\"#numbermax_value\" aria-label=\"numbermax_value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Number.MAX_VALUE</h2>\n<p><code class=\"language-text\">MAX_VALUE</code>의 경우도 비슷합니다. mantissa 52비트 모두를 1로 채우고, exponent의 최대값인 *1023을 적용하면 double precision으로 표현할 수 있는 최대값인 <code class=\"language-text\">1.7976931348623157e+308</code> (= <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>1024</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{1024}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>)가 됩니다.</p>\n<p>*double precision에서 exponent의 최대값이 1023인 이유는, exponent 11비트 모두 1인 경우 (즉, 1024) 특수값으로 취급되므로 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mn>11</mn></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mo>=</mo><mn>1023</mn></mrow><annotation encoding=\"application/x-tex\">(2^{11}-1)-1 = 1023</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">3</span></span></span></span>이 됩니다.</p>\n<br />\n<p>음수의 경우, 부호 비트만 다르고 이와 동일한 논리가 적용됩니다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>References</h2>\n<p><a href=\"https://stackoverflow.com/questions/307179/what-is-javascripts-highest-integer-value-that-a-number-can-go-to-without-losin#answer-49218637\" target=\"_blank\" rel=\"noreferrer noopener\">What is JavaScript’s highest integer value that a number can go to without losing precision? - stackoverflow</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\" target=\"_blank\" rel=\"noreferrer noopener\">Number.MAX_SAFE_INTEGER - MDN</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\" target=\"_blank\" rel=\"noreferrer noopener\">Number.MAX_VALUE - MDN</a></p>","frontmatter":{"title":"자바스크립트 MAX_SAFE_INTEGER와 MAX_VALUE","date":"January 04, 2022","category":"JavaScript"}}},"pageContext":{"slug":"/javascript/max-values/","previous":{"fields":{"slug":"/javascript/why-did-javascript-choose-a-prototype/"},"frontmatter":{"title":"왜 자바스크립트는 프로토타입을 선택했는가?"}},"next":{"fields":{"slug":"/algorithms/searching/binary-search/"},"frontmatter":{"title":"이진 탐색"}}}},"staticQueryHashes":[]}