{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/browser-event-loop/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"9a5e4076-dd7d-5e8f-9517-30ee73c45c25","excerpt":"브라우저의 이벤트 루프 자바스크립트는 싱글 스레드 기반의 언어이고, 자바스크립트 엔진은 오직 하나의 호출 스택을 사용한다. 즉, 요청이 동기적으로 처리되어 한 번에 한 가지 일만 처리할 수 있음을 의미한다. 이 때, 네트워크 요청과 같이 오버헤드가 큰 요청의 경우 동기적으로 처리된다면 다른 일을 처리할 수 없거나, 렌더링을 block하는 등 여러 문제가 발생할 수 있다. 따라서 자바스크립트의 주요 실행 환경(runtime)인 브라우저나 Node.js…","html":"<h2 id=\"브라우저의-이벤트-루프\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84\" aria-label=\"브라우저의 이벤트 루프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>브라우저의 이벤트 루프</h2>\n<ul>\n<li>자바스크립트는 싱글 스레드 기반의 언어이고, 자바스크립트 엔진은 오직 하나의 호출 스택을 사용한다. 즉, 요청이 동기적으로 처리되어 한 번에 한 가지 일만 처리할 수 있음을 의미한다.</li>\n<li>이 때, 네트워크 요청과 같이 오버헤드가 큰 요청의 경우 동기적으로 처리된다면 다른 일을 처리할 수 없거나, 렌더링을 block하는 등 여러 문제가 발생할 수 있다. 따라서 자바스크립트의 주요 실행 환경(runtime)인 브라우저나 Node.js에서는 비동기 작업을 수행할 수 있도록 다양한 기능을 제공한다.</li>\n<li>이를 위해, 자바스크립트의 실행 환경인 브라우저나 Node.js 에서는 (자바스크립트가 싱글 스레드인 것과는 달리) 여러 개의 스레드가 사용된다. 이렇게 여러 스레드를 사용하는 실행 환경과 자바스크립트 엔진을 연동하기 위해 사용되는 장치가 <strong>이벤트 루프</strong>이다.</li>\n<li>이벤트 루프가 “루프”라고 불리는 이유는, 이벤트 루프의 동작 방식이 계속해서 task들을 실행하는 무한루프와 같기 때문이다. 수도 코드로 이벤트 루프를 아주 간단히 나타내면 다음과 같다:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>eventLoop<span class=\"token punctuation\">.</span><span class=\"token function\">waitForTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  eventLoop<span class=\"token punctuation\">.</span><span class=\"token function\">processNextTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>참고로, Chrome/Chromium은 이벤트 루프의 구현 라이브러리로 <code class=\"language-text\">libevent</code> 를, Node.js는 <code class=\"language-text\">libuv</code> 를 사용한다.</li>\n</ul>\n<h2 id=\"매크로-태스크-큐\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%ED%81%AC%EB%A1%9C-%ED%83%9C%EC%8A%A4%ED%81%AC-%ED%81%90\" aria-label=\"매크로 태스크 큐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>(매크로) 태스크 큐</h2>\n<ul>\n<li>앞서 말했듯이, 이벤트 루프는 task가 들어오기를 기다렸다가, task가 들어오면 해당 task를 실행하고, 처리할 task가 없는 경우에는 task가 들어오기를 기다리는 무한 루프라고 할 수 있다.</li>\n<li>이 때 <code class=\"language-text\">task</code>란, 최초에 (<code class=\"language-text\">&lt;script></code> 태그로 로드한) 스크립트를 실행하거나, 이벤트가 발생했을 때 해당 이벤트를 처리하는 핸들러(콜백)을 실행하거나, <code class=\"language-text\">setTimeout</code> , <code class=\"language-text\">setInterval</code> 등에 의해 설정된 interval, timeout 등이 발생했을 때 콜백을 실행하는 등 (추후에) 실행되도록 스케쥴되는 자바스크립트 코드이다. 잠시 후에 살펴볼 microtask와 구분짓기 위해 macrotask라고도 한다.</li>\n<li>이러한 task들은 <strong>task queue</strong>라는 곳에 저장된다. <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loops\" target=\"_blank\" rel=\"noreferrer noopener\">HTML스펙</a>에 따르면, task queue는 “queue” 자료형이 아니라 “set” 자료형이라고 한다. 그 이유는, 이벤트 루프가 단순히 task queue의 첫 번째(가장 오래된) task를 가져오는 것이 아니라, 실행 가능한(runnable) task 중에서 첫 번째 task를 가져오는 것이기 때문에 task가 runnable인지 아닌지를 구분해야 하기 때문이다. 만약 task queue가 queue 자료형으로 되어 있다면 runnable이 아닌 task를 가져오는 경우가 생길 수도 있을 것이다.</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/browser_event_loop/Execution_timing_event_loop_with_tasks.png\" alt=\"Execution timing: event loop with tasks\">\n    <figcaption>출처: https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/</figcaption>\n</figure>\n<ul>\n<li>사실, task queue는 하나가 아니라 여러 개가 존재할 수 있다. 이 때, 동일한 task source로 부터 생성된 task는 반드시 같은 task queue에 들어가야 하며, 앞서 언급한 것과 같이 먼저온 순서대로 처리해야 한다.</li>\n<li>예를 들면, <code class=\"language-text\">setTimeout</code> 으로 생성된 task들이 저장되는 task queue와, <code class=\"language-text\">click</code> 이벤트에 의해 생성된 task들이 저장되는 task queue 등이 따로 존재할 수 있다.</li>\n<li>여러 개의 task queue중 어떤 task queue를 선택할 것인가는 구현하기 나름이다. (macro)task는 이벤트 루프의 각 iteration 마다 (task queue의 종류에 관계없이) 오직 하나만 처리된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>eventLoop<span class=\"token punctuation\">.</span><span class=\"token function\">waitForTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> taskQueue <span class=\"token operator\">=</span> eventLoop<span class=\"token punctuation\">.</span><span class=\"token function\">selectTaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    taskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">processNextTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/browser_event_loop/Execution_timing_event_loop_with_task_queues.png\" alt=\"Execution timing: event loop with task queues\">\n    <figcaption>출처: https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/</figcaption>\n</figure>\n<h2 id=\"마이크로-태스크-큐\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%ED%83%9C%EC%8A%A4%ED%81%AC-%ED%81%90\" aria-label=\"마이크로 태스크 큐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>마이크로 태스크 큐</h2>\n<ul>\n<li><code class=\"language-text\">Promise</code>, <code class=\"language-text\">queueMicrotask</code>, <code class=\"language-text\">MutationObserver</code> 등에 의해 생성된 task들을 <code class=\"language-text\">microtask</code> 라고 부른다. microtask들은 별도의 microtask queue에 저장된다.</li>\n<li>microtask는 이벤트 루프의 각 iteration 마다 하나의 (macro)task를 처리한 이후 microtask queue가 빌 때까지 모든 microtask를 처리한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>eventLoop<span class=\"token punctuation\">.</span><span class=\"token function\">waitForTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> taskQueue <span class=\"token operator\">=</span> eventLoop<span class=\"token punctuation\">.</span><span class=\"token function\">selectTaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    taskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">processNextTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> microtaskQueue <span class=\"token operator\">=</span> eventLoop<span class=\"token punctuation\">.</span>microTaskQueue\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>microtaskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    microtaskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">processNextMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/browser_event_loop/Execution_timing_event_loop_with_microtask_queue.png\" alt=\"Execution timing: event loop with microtask queues\">\n    <figcaption>출처: https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/</figcaption>\n</figure>\n<ul>\n<li>또한, (macro)task와는 다르게 microtask는 이벤트 루프의 iteration이 시작된 이후에 추가되었다고 하더라도 다음 iteration이 실행되기 전에 처리될 수 있다. 따라서 조심해야할 것이, 자칫 잘못하면 이벤트 루프가 microtask만 끊임없이 처리하게 될 수도 있다. 특히 브라우저의 경우, 이러한 일이 발생하면 유저와의 인터렉션, DOM 렌더링 등이 동작하지 않으므로 주의가 필요하다.</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/browser_event_loop/taskqueue.gif\" alt=\"Behavior of the task queue animation\">\n    <figcaption>출처: https://www.youtube.com/watch?v=cCOL7MC4Pl0</figcaption>\n</figure>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/browser_event_loop/microtaskqueue.gif\" alt=\"Behavior of the microtask queue animation\">\n    <figcaption>출처: https://www.youtube.com/watch?v=cCOL7MC4Pl0</figcaption>\n</figure>\n<h2 id=\"렌더링\" style=\"position:relative;\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>렌더링</h2>\n<ul>\n<li>마지막으로, UI 렌더링도 이벤트 루프에 의해 처리된다.</li>\n<li>엔진이 어떤 task를 처리하는 동안에는 렌더링이 발생하지 않는다. 실행중인 task를 완료한 이후에야 DOM에 발생한 변화를 반영하여 화면에 렌더링할 수 있다.</li>\n<li>UI 렌더링은 이벤트 루프의 매 iteration의 마지막 (즉 macrotask를 처리하고, microtask도 처리한 이후)에 “수행될 수도 있다”.</li>\n<li>수행될 수도 있다라고 한 이유는, 브라우저가 렌더링을 하지 않고 task만 처리하는 경우도 있기 때문이다. 즉, 렌더링을 할지 말지는 브라우저가 자유롭게 결정할 수 있기 때문에 이벤트 루프의 매 iteration 마지막에 렌더링 작업이 수행될 수도, 그렇지 않을 수도 있는 것이다.</li>\n<li>또한, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\" target=\"_blank\" rel=\"noreferrer noopener\">requestAnimationFrame()</a> 이라는 메소드를 통해 렌더링 직전에 특정 작업을 수행하도록 요청할 수도 있다. <code class=\"language-text\">requestAnimationFrame()</code> 에 전달되는 콜백들은 <strong>animationFrames</strong> 라는 큐에 저장되어 브라우저가 렌더링을 하는 경우, 렌더링을 하기 직전에 해당 큐에 있는 콜백들을 수행한다.</li>\n<li>이 때 이벤트 루프의 iteration이 시작되는 시점에 존재하던 콜백들은 모두 실행되지만, 도중에 추가된 콜백들은 현재 iteration에서는 실행되지 않고, 이후의 iteration에서 렌더링을 할 때 실행된다:</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/browser_event_loop/animationframes.gif\" alt=\"Behavior of the animation frames animation\">\n    <figcaption>출처: https://www.youtube.com/watch?v=cCOL7MC4Pl0</figcaption>\n</figure>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>eventLoop<span class=\"token punctuation\">.</span><span class=\"token function\">waitForTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> taskQueue <span class=\"token operator\">=</span> eventLoop<span class=\"token punctuation\">.</span><span class=\"token function\">selectTaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    taskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">processNextTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> microtaskQueue <span class=\"token operator\">=</span> eventLoop<span class=\"token punctuation\">.</span>microTaskQueue\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>microtaskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    microtaskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">processNextMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    animationTasks <span class=\"token operator\">=</span> animationFrames<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>animationTask <span class=\"token keyword\">of</span> animationTask<span class=\"token punctuation\">)</span> <span class=\"token function\">animationTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/browser_event_loop/Execution_timing_event_loop_with_rendering.png\" alt=\"Execution timing: event loop with rendering\">\n    <figcaption>출처: https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/</figcaption>\n</figure>\n<ul>\n<li>최종적으로 이벤트 루프의 흐름을 간단한 그림으로 나타내면 다음과 같다:</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/browser_event_loop/event_loop_flow.png\" alt=\"Event loop flow\">\n    <figcaption>출처: https://javascript.info/event-loop</figcaption>\n</figure>\n<ul>\n<li>또한, 브라우저 런타임을 간단한 그림으로 나타내면 다음과 같다:</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/browser_event_loop/browser_runtime_in_a_nutshell.png\" alt=\"browser runtime in a nutshell\">\n</figure>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>REFERENCES</h2>\n<p><a href=\"https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/\" target=\"_blank\" rel=\"noreferrer noopener\">https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/</a></p>\n<p><a href=\"https://javascript.info/event-loop\" target=\"_blank\" rel=\"noreferrer noopener\">https://javascript.info/event-loop</a></p>\n<p><a href=\"https://stackoverflow.com/questions/25750884/are-there-significant-differences-between-the-chrome-browser-event-loop-versus-t\" target=\"_blank\" rel=\"noreferrer noopener\">https://stackoverflow.com/questions/25750884/are-there-significant-differences-between-the-chrome-browser-event-loop-versus-t</a></p>\n<p><a href=\"https://velog.io/@yejineee/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%ED%83%9C%EC%8A%A4%ED%81%AC-%ED%81%90-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%ED%83%9C%EC%8A%A4%ED%81%AC-%EB%A7%A4%ED%81%AC%EB%A1%9C-%ED%83%9C%EC%8A%A4%ED%81%AC-g6f0joxx\" target=\"_blank\" rel=\"noreferrer noopener\">https://velog.io/@yejineee/이벤트-루프와-태스크-큐-마이크로-태스크-매크로-태스크-g6f0joxx</a></p>","frontmatter":{"title":"브라우저 환경에서의 이벤트 루프","date":"October 03, 2020","category":"javascript"}}},"pageContext":{"slug":"/javascript/browser-event-loop/","previous":{"fields":{"slug":"/web/how-browsers-work-1/"},"frontmatter":{"title":"브라우저는 어떻게 동작하는가? Part1"}},"next":{"fields":{"slug":"/architecture/refactoring-summary-1/"},"frontmatter":{"title":"리팩토링 2판 요약 정리 Ch.1"}}}},"staticQueryHashes":[]}