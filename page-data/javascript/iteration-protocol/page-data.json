{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/iteration-protocol/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"d47c86ed-c31e-5f39-bc75-05f0ab9e2d46","excerpt":"Iteration 프로토콜 자바스크립트의 iteration 프로토콜은 데이터 소스(sources)와 데이터 소비자(consumer) 개체(entity)를 연결하는 역할을 합니다. Iteration은 데이터 소스가 구현한  이라는 인터페이스를 데이터 소비자가 사용하는 방식으로 동작합니다: 자바스크립트 iteration 프로토콜에는 iterable 프로토콜과 iterator 프로토콜이 존재하는데, 하나씩 살펴봅시다. Iterable 프로토콜 Iterable…","html":"<h2 id=\"iteration-프로토콜\" style=\"position:relative;\"><a href=\"#iteration-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"iteration 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Iteration 프로토콜</h2>\n<p>자바스크립트의 iteration 프로토콜은 데이터 소스(sources)와 데이터 소비자(consumer) 개체(entity)를 연결하는 역할을 합니다. Iteration은 데이터 소스가 구현한 <code class=\"language-text\">Iterable</code> 이라는 인터페이스를 데이터 소비자가 사용하는 방식으로 동작합니다:</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/iterator-protocol/data_sources_and_consumers.png\" alt=\"JavaScript data sources and consumers\">\n    <figcaption>자바스크립트 데이터 소스와 데이터 소비자 및 이들을 연결하는 인터페이스</figcaption>\n</figure>\n<p>자바스크립트 iteration 프로토콜에는 <strong>iterable 프로토콜</strong>과 <strong>iterator 프로토콜</strong>이 존재하는데, 하나씩 살펴봅시다.</p>\n<h2 id=\"iterable-프로토콜\" style=\"position:relative;\"><a href=\"#iterable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"iterable 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Iterable 프로토콜</h2>\n<p>Iterable 프로토콜은 자바스크립트 객체가 <code class=\"language-text\">for...op</code>문, <code class=\"language-text\">...</code>연산과 같은 “iteration” 동작을 할 때 어떤 식으로 행동할지를 정의하는 프로토콜 입니다. 객체가 <code class=\"language-text\">iterable</code>이 되기 위해선 해당 객체의 내부 혹은 프로토타입 체인내에 <code class=\"language-text\">@@iterator</code> 메서드가 존재해야 합니다. <code class=\"language-text\">@@iterator</code>는 <a href=\"https://tc39.es/ecma262/#sec-well-known-symbols\" target=\"_blank\" rel=\"noreferrer noopener\">well-known-symbol</a>이라고 하는데, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\" target=\"_blank\" rel=\"noreferrer noopener\">Symbol.iterator</a>라는 상수를 통해 접근할 수 있습니다. ES2021을 기준으로 자바스크립트에는 <code class=\"language-text\">String</code>, <code class=\"language-text\">Array</code>, <code class=\"language-text\">TypedArray</code>, <code class=\"language-text\">Map</code>, <code class=\"language-text\">Set</code> 5가지 내장 iterable이 존재합니다.</p>\n<p>Iterable을 타입스크립트 인터페이스로 나타내면 다음과 같습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Iterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"iterator-프로토콜\" style=\"position:relative;\"><a href=\"#iterator-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"iterator 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Iterator 프로토콜</h2>\n<p>Iterator 프로토콜은 iterable 객체를 iteration할 때 어떤 값을 생성할 것인가를 정의하는 프로토콜입니다. 객체가 <code class=\"language-text\">iterator</code>가 되기 위해선 <code class=\"language-text\">iteration result</code> 객체를 반환하는 <code class=\"language-text\">next()</code> 메서드를 가지고 있어야 합니다.</p>\n<p>Iterator와 iteration result 객체를 타입스크립트 인터페이스로 나타내면 다음과 같습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IterationResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  done<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>IterationResult 객체의 <code class=\"language-text\">value</code>와 <code class=\"language-text\">done</code> 속성이 나타내는 것은 다음과 같습니다:</p>\n<ul>\n<li><strong>value</strong>: <code class=\"language-text\">iterator</code>에 의해 반환된 값입니다. 아무 타입이나 가능하며, <code class=\"language-text\">done</code> 속성이 <code class=\"language-text\">true</code>이면 생략될 수도 있습니다.</li>\n<li><strong>done</strong>: iteration의 종료 여부를 나타내는 boolean 값입니다. 이 속성을 생략하면 <code class=\"language-text\">done: false</code>로 간주합니다.</li>\n</ul>\n<br />\n<p><code class=\"language-text\">next()</code> 메서드는 반드시 <code class=\"language-text\">value</code>와 <code class=\"language-text\">done</code> 속성이 존재하는 객체를 반환해야만 합니다. <code class=\"language-text\">false</code>와 같은 원시 타입이 반환되면 <code class=\"language-text\">TypeError</code>가 발생합니다.</p>\n<p><code class=\"language-text\">for...of</code> 문의 <code class=\"language-text\">break</code>을 사용하는 경우 혹은 예외 상황과 같이, <code class=\"language-text\">iteration result</code> 객체의 <code class=\"language-text\">done</code> 속성이 <code class=\"language-text\">true</code>가 되기 전에 iteration이 종료되는 경우도 있습니다. 이 경우 자바스크립트 엔진은 <code class=\"language-text\">iterator</code> 객체에 <code class=\"language-text\">return()</code> 메서드가 존재하는지 살펴보고 만약 존재한다면 이 메서드를 아무런 인자 없이 호출합니다. 이때 <code class=\"language-text\">return()</code> 메서드 또한 반드시 <code class=\"language-text\">iteration result</code> 객체를 반환해야만 하는데, 비록 반환된 객체의 속성이 무시되기는 하지만 그렇다고 원시 타입을 반환하면 에러가 발생합니다. <code class=\"language-text\">return()</code> 메서드는 주로 iteration 동작을 종료한 뒤 클린업 작업을 수행해야 할 때, 예기치 못한 에러 등으로 인해 동작이 중간에 종료되는 경우에도 정상적으로 클린업 작업을 수행하기 위해 사용합니다.</p>\n<h2 id=\"iterable-객체를-iterate-하는-방법\" style=\"position:relative;\"><a href=\"#iterable-%EA%B0%9D%EC%B2%B4%EB%A5%BC-iterate-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"iterable 객체를 iterate 하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Iterable 객체를 iterate 하는 방법</h2>\n<p><code class=\"language-text\">Iterable</code> 객체를 iterate 하는 방법은 다음과 같습니다:</p>\n<ol>\n<li><code class=\"language-text\">Iterable</code> 객체의 <code class=\"language-text\">@@iterator</code> 메서드를 호출하여 해당 객체의 <code class=\"language-text\">iterator</code> 객체를 획득합니다.</li>\n<li><code class=\"language-text\">iterator</code> 객체가 반환하는 <code class=\"language-text\">iteration result</code> 객체의 <code class=\"language-text\">done</code> 속성값이 <code class=\"language-text\">true</code>가 될 때까지 <code class=\"language-text\">next()</code> 메서드를 호출합니다.</li>\n</ol>\n<p>이를 그림으로 나타내면 다음과 같습니다:</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/iterator-protocol/how_iteration_works_under_the_hood.png\" alt=\"How iteration works under the hood\">\n    <figcaption>Iterable 객체를 iterate 하는 방법</figcaption>\n</figure>\n<p>이를 이용하여 어떤 <code class=\"language-text\">iterable</code> 객체에 대한 일반적인 <code class=\"language-text\">for...of</code> 문을 다음 코드와 같이 작성할 수 있습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> iterable<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> it <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>it<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">;</span> it <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 1, 2, 3</span>\n\n\n<span class=\"token comment\">// for...of 내부에서 자동으로 iterator 메소드를 호출하여 iterator 객체를 사용합니다</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> elem <span class=\"token keyword\">of</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 1, 2, 3</span></code></pre></div>\n<br />\n<p><code class=\"language-text\">iterable</code>, <code class=\"language-text\">iterator</code> 객체의 주요한 특징 중 하나는, 이 객체들이 본질적으로 lazy 한 특성을 보인다는 것입니다. 즉, 다음 값을 얻기 위해 계산을 해야 할 때, 해당 값이 실제로 필요한 시점까지 그 계산을 미루는 것입니다.</p>\n<p>예를 들어 아주 긴 문자열을 공백으로 분리하여 여러 단어들로 토큰화하는 경우를 생각해봅시다. <code class=\"language-text\">.split()</code> 메소드를 사용하면 손쉽게 할 수 있지만, 이렇게 하면 분리하여 얻은 첫 번째 단어를 사용하기도 전에 미리 모든 문자열을 처리해놓게 됩니다. 만약 이렇게 했다가 나중에 알고 보니 처음 몇 개의 단어만 사용하고 나머지는 사용하지 않게 된다면 불필요한 메모리 낭비를 초래하게 됩니다.</p>\n<p>또한 <code class=\"language-text\">iterable</code>, <code class=\"language-text\">iterator</code> 프로토콜을 통해 배열과 같이 주로 iteration의 대상이 되는 자료 구조 이외의 어느 자료구조라도 손쉽게 iteration을 할 수 있게 됩니다.</p>\n<h2 id=\"비동기-iteration\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-iteration\" aria-label=\"비동기 iteration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>비동기 iteration</h2>\n<p>우선 앞서 살펴본 iterator와 iterator result의 인터페이스를 다시 한번 살펴봅시다:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  done<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>비동기 iteration 프로토콜을 구현하기 위해선 <code class=\"language-text\">next()</code> 메서드의 반환 값을 비동기로 전달하기만 하면 됩니다. 이를 위해 다음의 두 가지 방법을 고려해볼 수 있습니다:</p>\n<ul>\n<li><code class=\"language-text\">value</code>만 프로미스로 감쌀 것인가? (<code class=\"language-text\">value</code>의 타입이 <code class=\"language-text\">Promise&lt;T></code>)</li>\n<li><code class=\"language-text\">next()</code> 메서드가 프로미스를 반환할 것인가? (<code class=\"language-text\">next()</code>의 리턴 타입이 <code class=\"language-text\">Promise&lt;IteratorResult&lt;T>></code>)</li>\n</ul>\n<p>하지만 생각해보면 두 번째 방법이어야만 합니다. 그 이유는 <code class=\"language-text\">next()</code> 메서드가 결과를 반환할 때 비동기 작업을 수행하기 때문인데, 작업의 결과값을 반환할지 아니면 iteration의 종료를 알릴지는 비동기 작업이 끝난 이후에야 할 수 있습니다. 다시 말해, <code class=\"language-text\">value</code>와 <code class=\"language-text\">done</code> 속성 모두 프로미스로 감싸야 한다는 의미입니다.</p>\n<p>비동기 iteration에 대한 인터페이스는 다음과 같습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AsyncIterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>asyncIterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AsyncIterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AsyncIterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동기 iteration 인터페이스와 차이나는 부분입니다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  done<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이러한 비동기 iteration 프로토콜을 이용하여 <code class=\"language-text\">for await...of</code> 문을 사용할 수 있습니다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" target=\"_blank\" rel=\"noreferrer noopener\">Iteration protocols - MDN</a></p>\n<p><a href=\"https://exploringjs.com/impatient-js/\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript for impatient programmers (ES2021 edition)</a></p>\n<p><a href=\"https://www.oreilly.com/library/view/javascript-the-definitive/9781491952016/\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript: The Definitive Guide, 7th Edition</a></p>","frontmatter":{"title":"자바스크립트 Iteration 프로토콜","date":"January 10, 2022","category":"JavaScript"}}},"pageContext":{"slug":"/javascript/iteration-protocol/","previous":{"fields":{"slug":"/javascript/generator/"},"frontmatter":{"title":"자바스크립트 제너레이터"}},"next":null}},"staticQueryHashes":[]}