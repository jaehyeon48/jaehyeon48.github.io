{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/promise-states/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"78fbbf72-2c09-504a-8518-f97e52297d15","excerpt":"프로미스란? ECMAScript 2022 명세서에 따르면, 프로미스는 (아마도 비동기로 동작하는) 지연된 계산의 최종 결과물에 대해 일종의 프록시로서 사용되는 객체입니다. 처음에 이 문장을 보고 도대체 무슨 소리인지 이해가 안됐습니다 😂. 그래서 고민 끝에 제 나름대로 다음과 같이 정의를 내려봤습니다: 자바스크립트의 프로미스란, 미래의 어느 시점에 어떤 값 혹은 에러로 대체될 “구멍(hole)” 혹은 placeholder…","html":"<h2 id=\"프로미스란\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EB%9E%80\" aria-label=\"프로미스란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>프로미스란?</h2>\n<p><a href=\"https://tc39.es/ecma262/#sec-promise-objects\" target=\"_blank\" rel=\"noreferrer noopener\">ECMAScript 2022 명세서</a>에 따르면,</p>\n<blockquote>\n<p>프로미스는 (아마도 비동기로 동작하는) 지연된 계산의 최종 결과물에 대해 일종의 프록시로서 사용되는 객체입니다.</p>\n</blockquote>\n<p>처음에 이 문장을 보고 도대체 무슨 소리인지 이해가 안됐습니다 😂. 그래서 고민 끝에 제 나름대로 다음과 같이 정의를 내려봤습니다:</p>\n<blockquote>\n<p>자바스크립트의 프로미스란, 미래의 어느 시점에 어떤 값 혹은 에러로 대체될 “구멍(hole)” 혹은 placeholder 이다. </p>\n</blockquote>\n<p>다시 말해, 프로미스는 정확히 언젠지는 알 수 없지만 미래의 어느 시점에 어떤 값 혹은 에러로 귀결(resolve)되는 객체라고 생각합니다. 저는 “프로미스”라는 이름을 정말 잘 지었다고 생각하는데요, “프로미스”라는 말 그대로 자바스크립트가 개발자에게 “정확히 언제라곤 못하지만 언젠가 너에게 어떤 연산을 수행한 결과값(혹은 에러)을 너에게 알려준다고 <strong>약속</strong>할게” 라고 말하는 것이라 생각합니다.</p>\n<p>또한, 조금 다른 시각에서 생각해보자면 프로미스는 자바스크립트에서 비동기를 일관된 방식으로 처리하도록 하는 인터페이스라고 할 수도 있을것 같습니다.</p>\n<h2 id=\"탄생-배경\" style=\"position:relative;\"><a href=\"#%ED%83%84%EC%83%9D-%EB%B0%B0%EA%B2%BD\" aria-label=\"탄생 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>탄생 배경</h2>\n<p>프로미스가 등장하게 된 배경을 알아보기 위해, 우선 기존에 비동기 동작을 처리할 때 사용된 콜백 스타일에 대해 간략히 살펴보겠습니다. 예를 들어, 다음 코드와 같이 어떤 연산을 수행하기 위해선 이전 연산의 결과값이 필요한 경우가 있을 수 있습니다:</p>\n<iframe src=\"https://codesandbox.io/embed/callback-hell-example-qwfssq?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"Callback Hell Example\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<p>물론, 예시를 위해 꾸며낸 코드이지만, 실제론 DB에 접근하여 데이터를 가져온 후 파일을 읽고서 다시 API를 호출하고, … 와 같은 상황이 있을 수 있습니다.</p>\n<p>위와 같이 콜백 함수들이 계속해서 중첩되는 것을 <a href=\"https://www.freecodecamp.org/news/how-to-deal-with-nested-callbacks-and-avoid-callback-hell-1bc8dc4a2012/\" target=\"_blank\" rel=\"noreferrer noopener\">콜백 지옥</a>이라고 합니다. 지옥이라는 표현을 쓸 정도로 끔찍하죠 👿 위 코드는 정말 간단한 예시이기 때문에 못느끼실수도 있겠습니다만 콜백 지옥으로 인해 인덴트가 계속해서 중첩되고, 그에 따라 코드의 가독성이 하락하는 문제가 발생할 수 있습니다.</p>\n<p>프로미스는 이와 같은 콜백 지옥을 해결하기 위해 등장했습니다. 프로미스를 이용하여 위 코드를 다음과 같이 바꿀 수 있습니다:</p>\n<iframe src=\"https://codesandbox.io/embed/resolve-callback-hell-with-promise-39sw2?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"Resolve Callback Hell with Promise\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<p>훨씬 나은것 같지 않나요? 여기서 각각의 <code class=\"language-text\">.then</code> 메서드는 이전 동작이 완료되고 나서야 수행됩니다. 이때, <code class=\"language-text\">.then</code> 메서드는 프로미스를 반환하기 때문에 위와 같이 여러 개를 연결하여 사용할 수도 있습니다. 또한, 에러를 처리하기 위해선 단 한개의 <code class=\"language-text\">.catch</code>만 사용하면 됩니다.</p>\n<p>이때 위 코드의 경우, <code class=\"language-text\">fn((arg) => func(arg))</code>는 <code class=\"language-text\">fn(func)</code>과 동일한 코드이므로 아래와 같이 단순화할 수 있습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">opA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>opB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>opC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>opB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<iframe src=\"https://codesandbox.io/embed/resolve-callback-hell-with-promise-simpler-version-nl00u?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"Resolve Callback Hell with Promise simpler version\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<br />\n \n📢 사실 async/await 문법을 이용하여 위 코드를 더욱 개선할 수 있습니다만, async/await는 다른 포스트에서 다룰게요!\n<h2 id=\"프로미스의-상태\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C\" aria-label=\"프로미스의 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>프로미스의 상태</h2>\n<p>프로미스는 다음의 세 가지 상태 중 하나에 속합니다. 이때 프로미스가 속한 상태는 상호 배타적이라서, 동시에 두 상태가 아닌 오직 하나의 상태에만 속하게 됩니다:</p>\n<ul>\n<li><strong>fulfilled</strong>: 작업을 성공적으로 수행되었음을 의미하는 상태입니다.</li>\n<li><strong>rejected</strong>: 작업이 실패했음을 수행되었음을 의미하는 상태입니다.</li>\n<li><strong>pending</strong>: 초기 상태로서, <code class=\"language-text\">fulfilled</code>도 아니고 <code class=\"language-text\">rejected</code>도 아닌 경우입니다.</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/promise/promise_lifecycle.png\" alt=\"Promise Lifecycle\">\n    <figcaption>프로미스 라이프 사이클</figcaption>\n</figure>\n<p>이때 프로미스가 pending 상태가 아니라면, 즉 fulfilled 상태이거나 rejected 상태이면 해당 프로미스가 <strong>settled</strong> 되었다고 합니다 (편의상 settled라고 하는 것이지 실제로 “settled”라는 상태가 있는 건 아닙니다).</p>\n<h2 id=\"프로미스의-운명fate\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EC%9D%98-%EC%9A%B4%EB%AA%85fate\" aria-label=\"프로미스의 운명fate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>프로미스의 운명(Fate)</h2>\n<p>프로미스를 사용할 때 흔히 “resolve”라는 말을 사용하는데, 이는 프로미스의 <em>운명</em>과 연관된 말입니다. 앞서 살펴본 프로미스의 상태보다 좀 더 포괄적인 개념이랄까요?</p>\n<p>즉, 제가 이해하기로 프로미스는 </p>\n<p>프로미스는 다음의 상호 배타적인 두 가지 운명 중 하나에 속합니다:</p>\n<ul>\n<li><strong>resolved(귀결됨)</strong>: settled 되었거나, 다른 프로미스의 상태에 맞추기 위해 “잠긴(locked in)” 상황을 의미합니다. 이미 귀결된 프로미스를 resolve 하거나 reject 하려고 해도 아무런 일이 발생하지 않습니다.</li>\n<li><strong>unresolved</strong>: resolved가 아닌 프로미스들은 모두 unresolved 입니다. unresolved인 프로미스를 resolve 하거나 reject 하려고 하면 해당 프로미스에 영향을 미칩니다.</li>\n</ul>\n<p>프로미스는 또 다른 프로미스 혹은 thenable*로 “resolve” 될 수 있습니다. 이 경우, 프로미스는 이후에 사용할 프로미스 혹은 thenable을 저장합니다. 또는, 프로미스가 아닌 값으로 “resolve”될 수도 있습니다. 이 경우, 프로미스는 해당 값으로 fulfilled 됩니다.</p>\n<p><small>* then() 메서드를 가지고 있는 객체를 thenable 이라고 합니다. 모든 프로미스는 thenable 이지만, 모든 thenable이 프로미스인 것은 아닙니다.</small></p>\n<h2 id=\"프로미스의-상태와-운명의-관계\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C%EC%99%80-%EC%9A%B4%EB%AA%85%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"프로미스의 상태와 운명의 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>프로미스의 상태와 운명의 관계</h2>\n<p>resolved인 프로미스는 다음의 세 가지 상태 중 하나에 속합니다:</p>\n<ul>\n<li><strong>fulfilled</strong>: 프로미스가 아닌 값으로 resolve 되었거나, fulfilled 상태인 또 다른 프로미스로 resolve 되었거나, fulfillment 핸들러를 전달받는 즉시 해당 핸들러를 호출하여 fulfilled가 될 thenable 로 resolve된 경우, 해당 프로미스는 fulfilled 상태입니다.</li>\n<li><strong>rejected</strong>: 자신(프로미스)이 reject 되었거나, rejected 상태인 또 다른 프로미스로 resolve 되었거나, rejection 핸들러를 전달받는 즉시 해당 핸들러를 호출하여 rejected가 될 thenable로 resolve된 경우, 해당 프로미스는 rejected 상태입니다.</li>\n<li><strong>pending</strong>: pending 상태인 또 다른 프로미스로 resolve 되었거나, 어떠한 (fulfillment 혹은 rejection) 핸들러도 실행할 계획이 없는 thenable로 resolve 된 경우, 해당 프로미스는 pending 상태입니다.</li>\n</ul>\n<br />\n<p>앞서 resolved가 아닌 프로미스는 모두 unresolved라고 했는데, 잘 생각해보면 unresolved인 프로미스는 무조건 pending 상태임을 알 수 있습니다. 상태는 크게 pending 아니면 settled로 나뉘는데 만약 settled 상태라고 한다면 해당 프로미스는 resolved라는 뜻이니까요!</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/javascript/promise/promise_states_and_fates.png\" alt=\"Relating promise's states and fates\">\n    <figcaption>프로미스의 상태와 운명간의 관계</figcaption>\n</figure>\n<p>이를 표로 정리해보면 아래와 같습니다:</p>\n<table>\n<thead>\n<tr>\n<th><strong>동작</strong></th>\n<th><strong>의존성</strong></th>\n<th><strong>상태</strong></th>\n<th><strong>resolved?</strong></th>\n<th><strong>settled?</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">new Promise((resolve, reject) => ...)</code></td>\n<td>❌</td>\n<td>pending</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">...resolve(thenable)</code></td>\n<td>locked in</td>\n<td>pending*</td>\n<td>🟢</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">...resolve(other)</code></td>\n<td>❌</td>\n<td>fulfilled</td>\n<td>🟢</td>\n<td>🟢</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">...reject(any)</code></td>\n<td>❌</td>\n<td>rejected</td>\n<td>🟢</td>\n<td>🟢</td>\n</tr>\n</tbody>\n</table>\n<p><small>*해당 프로미스가 어떤 상태가 될지는 thenable에 달려있습니다.</small></p>\n<p>프로미스가 어떤 상태가 될지는 thenable에 달린 경우, 즉 프로미스가 thenable에 “locked in”된 경우는 <a href=\"https://codesandbox.io/s/hidden-cache-mj5pk?file=/src/index.js:0-611\" target=\"_blank\" rel=\"noreferrer noopener\">이 데모</a>에서 보실 수 있습니다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>References</h2>\n<p><a href=\"https://stackoverflow.com/questions/35398365/js-promises-fulfill-vs-resolve#answer-56850392\" target=\"_blank\" rel=\"noreferrer noopener\">https://stackoverflow.com/questions/35398365/js-promises-fulfill-vs-resolve#answer-56850392</a></p>\n<p><a href=\"https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md</a></p>\n<p><a href=\"https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise-objects\" target=\"_blank\" rel=\"noreferrer noopener\">https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise-objects</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noreferrer noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>","frontmatter":{"title":"자바스크립트 프로미스와 프로미스 상태들","date":"December 31, 2021","category":"JavaScript"}}},"pageContext":{"slug":"/javascript/promise-states/","previous":{"fields":{"slug":"/react/the-elements-of-ui-engineering/"},"frontmatter":{"title":"UI 엔지니어링의 요소들"}},"next":{"fields":{"slug":"/computer-architecture/how-computers-represent-numbers/"},"frontmatter":{"title":"컴퓨터는 어떻게 숫자를 표현하는가"}}}},"staticQueryHashes":[]}