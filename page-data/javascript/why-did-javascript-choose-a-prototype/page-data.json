{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/why-did-javascript-choose-a-prototype/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"fd4b1eb5-4021-5a5d-82ae-f648a027e87d","excerpt":"이 글은 임성묵님의 자바스크립트는 왜 프로토타입을 선택했을까를 요약한 글입니다. Why Did JavaScript Choose a Prototype? 플라톤과 이데아, 그리고 클래스 기반의 OOP 우선 프로토타입을 이해하기 위해선 그 대척점에 있는 클래스를 이해해야 합니다. 그 전에 클래스 기반 OOP의 근거가 되는 서양 철학부터 잠깐 살펴봅시다. 서양 철학은 다음의 이분법적인 세계관을 가집니다: 영혼 vs. 육체 추상적 vs. 구체적 이데아 vs…","html":"<p>이 글은 임성묵님의 <a href=\"https://medium.com/@limsungmook?p=997f985adb42\" target=\"_blank\" rel=\"noreferrer noopener\">자바스크립트는 왜 프로토타입을 선택했을까</a>를 요약한 글입니다.</p>\n<hr class=\"custom-hr\" />\n<h1 id=\"why-did-javascript-choose-a-prototype\" style=\"position:relative;\"><a href=\"#why-did-javascript-choose-a-prototype\" aria-label=\"why did javascript choose a prototype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Why Did JavaScript Choose a Prototype?</h1>\n<h2 id=\"플라톤과-이데아-그리고-클래스-기반의-oop\" style=\"position:relative;\"><a href=\"#%ED%94%8C%EB%9D%BC%ED%86%A4%EA%B3%BC-%EC%9D%B4%EB%8D%B0%EC%95%84-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98%EC%9D%98-oop\" aria-label=\"플라톤과 이데아 그리고 클래스 기반의 oop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>플라톤과 이데아, 그리고 클래스 기반의 OOP</h2>\n<p>우선 프로토타입을 이해하기 위해선 그 대척점에 있는 클래스를 이해해야 합니다.</p>\n<p>그 전에 클래스 기반 OOP의 근거가 되는 서양 철학부터 잠깐 살펴봅시다. 서양 철학은 다음의 이분법적인 세계관을 가집니다:</p>\n<ul>\n<li>영혼 vs. 육체</li>\n<li>추상적 vs. 구체적</li>\n<li>이데아 vs. 프랙티스</li>\n</ul>\n<p>눈앞에 보이는, 실재하는 사물이 있다면 반드시 그것의 본질이 존재한다는 것이 플라톤의 주장입니다.</p>\n<p>의자를 예로 들면, 세상에는 다양한 종류와 형태의 의자가 존재하는데, 이러한 실제 의자들의 본질적이고 추상적인 “실체”가 반드시 존재한다는 것입니다. 이러한 “본질 세계”를 <strong>이데아(idea)</strong> 라고 합니다. 즉, 현실 세계의 의자는 모두 이데아의 의자를 “모방”한 의자라는 것입니다.</p>\n<p>영어권의 사고방식은 모두 이러한 이분법적인 사고방식을 근거로 합니다. “관사”를 보면 알 수 있는데, 의자를 다시 예로 들자면 영어권에서는 이데아 세계에 있는 추상적인 존재를 지칭할 때 단순히 “chair”라고 합니다. 반면, 현실 세계에 존재하는 의자를 가리킬 땐 관사를 붙여 “a chair”, “the chair”, “chairs”와 같이 표현합니다.</p>\n<p>위와 같은 사고방식을 컴퓨터로 끌고 들어온 결과가 바로 클래스 기반의 객체 지향 프로그래밍 패러다임입니다.</p>\n<p>예시를 코드로 표현해봅시다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chair</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myChair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드에서, <code class=\"language-text\">Chair</code> 클래스는 이데아에 존재하는 추상적인 개념입니다. 힙 영역만을 실존 세계라고 한다면, 위 클래스는 코드상으로만 존재하지 실제로는 존재하지 않습니다.</p>\n<p>이러한 클래스를 실제 세계에 존재하게끔 하려면, <code class=\"language-text\">new</code> 키워드를 사용하여 추상적인 클래스로만 존재하던 의자를 메모리라는 현실 세계에 구체적인 존재로 인스턴스 화 하면 됩니다. <code class=\"language-text\">new Chair();</code>와 같이 말이죠.</p>\n<p>이와 같이, 클래스 기반의 OOP는 플라톤류(Platonic) 서양 철학의 자연스러운 흐름입니다.</p>","frontmatter":{"title":"왜 자바스크립트는 프로토타입을 선택했는가?","date":"January 03, 2022","category":"javascript"}}},"pageContext":{"slug":"/javascript/why-did-javascript-choose-a-prototype/","previous":{"fields":{"slug":"/javascript/promise/"},"frontmatter":{"title":"자바스크립트 프로미스"}},"next":null}},"staticQueryHashes":[]}