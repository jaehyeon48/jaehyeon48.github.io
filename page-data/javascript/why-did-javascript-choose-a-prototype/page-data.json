{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/why-did-javascript-choose-a-prototype/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"fd4b1eb5-4021-5a5d-82ae-f648a027e87d","excerpt":"이 글은 임성묵님의 자바스크립트는 왜 프로토타입을 선택했을까를 요약한 글입니다. Why Did JavaScript Choose a Prototype? 플라톤과 이데아, 그리고 클래스 기반의 OOP 우선 프로토타입을 이해하기 위해선 그 대척점에 있는 클래스를 이해해야 합니다. 그 전에 클래스 기반 OOP의 근거가 되는 서양 철학부터 잠깐 살펴봅시다. 서양 철학은 다음의 이분법적인 세계관을 가집니다: 영혼 vs. 육체 추상적 vs. 구체적 이데아 vs…","html":"<p>이 글은 임성묵님의 <a href=\"https://medium.com/@limsungmook?p=997f985adb42\" target=\"_blank\" rel=\"noreferrer noopener\">자바스크립트는 왜 프로토타입을 선택했을까</a>를 요약한 글입니다.</p>\n<hr class=\"custom-hr\" />\n<h1 id=\"why-did-javascript-choose-a-prototype\" style=\"position:relative;\"><a href=\"#why-did-javascript-choose-a-prototype\" aria-label=\"why did javascript choose a prototype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Why Did JavaScript Choose a Prototype?</h1>\n<h2 id=\"플라톤과-이데아-그리고-클래스-기반의-oop\" style=\"position:relative;\"><a href=\"#%ED%94%8C%EB%9D%BC%ED%86%A4%EA%B3%BC-%EC%9D%B4%EB%8D%B0%EC%95%84-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98%EC%9D%98-oop\" aria-label=\"플라톤과 이데아 그리고 클래스 기반의 oop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>플라톤과 이데아, 그리고 클래스 기반의 OOP</h2>\n<p>우선 프로토타입을 이해하기 위해선 그 대척점에 있는 클래스를 이해해야 합니다.</p>\n<p>그 전에 클래스 기반 OOP의 근거가 되는 서양 철학부터 잠깐 살펴봅시다. 서양 철학은 다음의 이분법적인 세계관을 가집니다:</p>\n<ul>\n<li>영혼 vs. 육체</li>\n<li>추상적 vs. 구체적</li>\n<li>이데아 vs. 프랙티스</li>\n</ul>\n<p>눈앞에 보이는, 실재하는 사물이 있다면 반드시 그것의 본질이 존재한다는 것이 플라톤의 주장입니다.</p>\n<p>의자를 예로 들면, 세상에는 다양한 종류와 형태의 의자가 존재하는데, 이러한 실제 의자들의 본질적이고 추상적인 “실체”가 반드시 존재한다는 것입니다. 이러한 “본질 세계”를 <strong>이데아(idea)</strong> 라고 합니다. 즉, 현실 세계의 의자는 모두 이데아의 의자를 “모방”한 의자라는 것입니다.</p>\n<p>영어권의 사고방식은 모두 이러한 이분법적인 사고방식을 근거로 합니다. “관사”를 보면 알 수 있는데, 의자를 다시 예로 들자면 영어권에서는 이데아 세계에 있는 추상적인 존재를 지칭할 때 단순히 “chair”라고 합니다. 반면, 현실 세계에 존재하는 의자를 가리킬 땐 관사를 붙여 “a chair”, “the chair”, “chairs”와 같이 표현합니다.</p>\n<p>위와 같은 사고방식을 컴퓨터로 끌고 들어온 결과가 바로 클래스 기반의 객체 지향 프로그래밍 패러다임입니다.</p>\n<p>예시를 코드로 표현해봅시다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chair</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myChair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드에서, <code class=\"language-text\">Chair</code> 클래스는 이데아에 존재하는 추상적인 개념입니다. 힙 영역만을 실존 세계라고 한다면, 위 클래스는 코드상으로만 존재하지 실제로는 존재하지 않습니다.</p>\n<p>이러한 클래스를 실제 세계에 존재하게끔 하려면, <code class=\"language-text\">new</code> 키워드를 사용하여 추상적인 클래스로만 존재하던 의자를 메모리라는 현실 세계에 구체적인 존재로 인스턴스 화 하면 됩니다. <code class=\"language-text\">new Chair();</code>와 같이 말이죠.</p>\n<p>이와 같이, 클래스 기반의 OOP는 플라톤류(Platonic) 서양 철학의 자연스러운 흐름입니다.</p>\n<h2 id=\"분류-classification\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EB%A5%98-classification\" aria-label=\"분류 classification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>분류 (Classification)</h2>\n<p>플라톤의 이와 같은 이데아 이론은 그의 제자 아리스토텔레스에 의해 <strong>분류(classification)</strong>란 개념으로 정립됩니다. “클래스(class)“라는 말이 어디서 왔는지 이제 짐작이 가실 겁니다.</p>\n<p>아리스토텔레스에 따르면,</p>\n<blockquote>\n<p><strong>개체의 속성이 동일한 경우</strong>, 개체 그룹은 같은 범주에 속한다.</p>\n</blockquote>\n<p>이는 전통적인 클래스 기반 OOP의 “일반화”와 일치하는 말입니다. 여기서 속성은 클래스의 프로퍼티(=속성)가 되겠죠. 프로퍼티가 유사한 객체들은 일반화를 거쳐 클래스로 추상화됩니다.</p>\n<h2 id=\"프로토타입-prototype\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-prototype\" aria-label=\"프로토타입 prototype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>프로토타입 (Prototype)</h2>\n<p>프로토타입이란 개념은 분류 이론을 정면으로 반박하여 나온 이론이기 때문에, 앞서 살펴본 “분류”에 대해 반드시 알 필요가 있었습니다.</p>\n<p>철학자 비트겐슈타인은 아리스토텔레스의 분류 개념을 정면으로 반박합니다:</p>\n<blockquote>\n<p>공유 속성의 관점에서 정의하기 어려운 개념이 있다 (사실상, 올바른 분류란 없다)</p>\n</blockquote>\n<p>이에 대한 근거로 게임을 드는데, 일반적으로 게임에는 “승리”와 “패배”가 존재합니다. 즉 승리, 패배라는 속성이 있다는 것이죠. 하지만 그 반론으로 <a href=\"https://en.wikipedia.org/wiki/Ring_a_Ring_o%27_Roses\" target=\"_blank\" rel=\"noreferrer noopener\">ring around the rosie</a>라는 게임을 들 수 있습니다. 이 게임에는 다 같이 빙글빙글 돌다가 주저앉는 게임인데, 그 누구도 승리 혹은 패배하지 않습니다.</p>\n<p>이와 같이, 게임에는 공유 속성이 없습니다:</p>\n<ul>\n<li><strong>승리/패배 여부</strong>: ring around the rosie 에는 없음.</li>\n<li><strong>숙련도 여부</strong>: 주사위 게임에는 없음.</li>\n<li><strong>플레이어 존재 여부</strong>: 플레이어가 없는 게임은?</li>\n</ul>\n<p>또한 예술 작품의 경우에도 공통 속성을 정의할 수 없습니다. 즉, 좀 더 철학적인 관점에서 “게임”, “예술” 등의 단어는 속성으로 규정할 수 없다는 뜻입니다.</p>\n<blockquote>\n<p>세계에 미리 내재되어서 대상과 언어를 완전히 규정하는 언어는 존재하지 않는다 — (비트겐슈타인)</p>\n</blockquote>\n<p>이처럼 분류 이론을 정면으로 반박한 비트겐슈타인은 다음과 같은 말을 남겼습니다:</p>\n<blockquote>\n<p>표현은 삶의 흐름 속에서만 의미를 갖는다.</p>\n</blockquote>\n<p>이 내용을 좀 더 살펴봅시다.</p>\n<h2 id=\"의미사용이론-the-use-theory-of-meaning\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EB%AF%B8%EC%82%AC%EC%9A%A9%EC%9D%B4%EB%A1%A0-the-use-theory-of-meaning\" aria-label=\"의미사용이론 the use theory of meaning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>의미사용이론 (The Use Theory of Meaning)</h2>\n<p><strong>언어란 사용에 의해 의미가 결정된다</strong>는 이론이 바로 의미사용이론입니다. 즉, 단어의 “진정한 본래 의미”란 존재하지 않고 대신 “상황과 맥락에 의해 의미가 결정된다”라고 주장합니다. 그러니 백날 단어의 의미를 분석하고 있어 봤자 아무 소용없는 짓이라는 것입니다.</p>\n<p>이에 대해 비트겐슈타인은 목수와 제자를 예로 듭니다. 장인은 집을 짓기 위해 “벽돌”이란 무엇인가에 대해 제자에게 가르칠 것입니다. 이때 사용된 “벽돌”은 사전적인 의미입니다. 하지만 “벽돌”이 꼭 이런 의미로만 사용되는 것은 아니죠. 다음과 같은 상황에서 “벽돌”은 다른 의미를 지니게 됩니다:</p>\n<ul>\n<li>집을 짓는 현장에서 목수가 제자에게 벽돌을 어떻게 쌓는지 보여줍니다. 목수는 제자에게 일을 시키기 위해 제자와 제자 옆에 있는 벽돌을 바라보며 이렇게 외칩니다: “벽돌!”</li>\n<li>제자가 벽돌을 쌓는 모습을 지켜보다가, 벽돌 한 장 만큼의 빈틈을 발견하곤 목수는 제자와 빈틈을 동시에 바라보며 이렇게 외칩니다: “벽돌!”</li>\n<li>목수와 제자 뒤에는 집 짓는데 사용될 벽돌들이 층층이 쌓여 있었습니다. 이때 맨 위쪽 벽돌이 흔들리더니 떨어지려고 합니다. 제자와 약간 거리가 있던 목수는 제자에게 황급히 소리칩니다: “벽돌!”</li>\n</ul>\n<p>위 세 가지 상황에서 목수는 제자에게 “벽돌” 이라는 동일한 단어를 사용했지만, 각 단어들은 사전적인 의미로서의 “벽돌”만을 의미하고 있지는 않습니다. 첫 번째 상황에선 “벽돌을 달라”, 두 번째에선 “벽돌을 채워라”, 세 번째에선 “벽돌을 피해라” 라는 의미로 사용되었지요.</p>\n<p>만약 이 내용이 어렵다면 <strong>맥락(Context)</strong>이 중요하다는 사실만 기억해두세요. 이 “컨텍스트”로 프로토타입 기반 언어의 실행 컨텍스트를 설명할 수 있습니다.</p>\n<h2 id=\"additional-reference\" style=\"position:relative;\"><a href=\"#additional-reference\" aria-label=\"additional reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Additional Reference</h2>\n<p><a href=\"https://imnt.tistory.com/207\" target=\"_blank\" rel=\"noreferrer noopener\">비트겐슈타인(8)-후기 사상 : 용도의미론(the use theory of meaning) :: 어느 히키코모리의 블로그</a></p>","frontmatter":{"title":"왜 자바스크립트는 프로토타입을 선택했는가?","date":"January 03, 2022","category":"JavaScript"}}},"pageContext":{"slug":"/javascript/why-did-javascript-choose-a-prototype/","previous":{"fields":{"slug":"/computer-architecture/how-computers-represent-numbers/"},"frontmatter":{"title":"컴퓨터는 어떻게 숫자를 표현하는가"}},"next":{"fields":{"slug":"/javascript/max-values/"},"frontmatter":{"title":"자바스크립트 MAX_SAFE_INTEGER와 MAX_VALUE"}}}},"staticQueryHashes":[]}