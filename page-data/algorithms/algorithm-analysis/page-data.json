{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithms/algorithm-analysis/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"20ebed52-11f1-5923-ae6a-9073df845894","excerpt":"알고리즘 분석이란? 알고리즘 분석이란, 알고리즘의 자원(resource) (실행 시간, 메모리, 통신 등등..) 사용량을 분석하는 것을 의미합니다. 시간복잡도 (Time Complexity…","html":"<h2 id=\"알고리즘-분석이란\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B6%84%EC%84%9D%EC%9D%B4%EB%9E%80\" aria-label=\"알고리즘 분석이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>알고리즘 분석이란?</h2>\n<p>알고리즘 분석이란, 알고리즘의 <strong>자원(resource) (실행 시간, 메모리, 통신 등등..) 사용량을 분석하는 것</strong>을 의미합니다.</p>\n<h3 id=\"시간복잡도-time-complexity\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84-time-complexity\" aria-label=\"시간복잡도 time complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>시간복잡도 (Time Complexity)</h3>\n<p>알고리즘의 실행 시간은 실행환경 (컴퓨터의 성능, 운영체제, 프로그래밍 언어, 컴파일러 등)에 따라 달라질 수 있습니다. 이로 인해 알고리즘의 “정확한” 실행 시간을 측정하여 비교하는 것은 사실상 불가능하므로, 대신 알고리즘이 수행하는 <strong>연산의 실행 횟수</strong>를 세어 알고리즘을 분석합니다.</p>\n<p>이때, 연산의 실행 횟수는 <strong>입력 데이터의 크기에 관한 함수</strong>로 표현하게 되는데, 데이터의 크기가 같더라도 실제 데이터(이를테면 데이터의 종류)에 따라서 달라질 수 있습니다.</p>\n<h3 id=\"점근-표기법-asymptotic-notation\" style=\"position:relative;\"><a href=\"#%EC%A0%90%EA%B7%BC-%ED%91%9C%EA%B8%B0%EB%B2%95-asymptotic-notation\" aria-label=\"점근 표기법 asymptotic notation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>점근 표기법 (Asymptotic Notation)</h3>\n<p>점근 표기법은 데이터의 크기(개수)가 무한대를 향한다 (n → ∞)라고 했을 때, 그에 따라 수행 시간이 증가하는 비율 (growth rate)로 시간복잡도를 표현하는 방법입니다. 흔히 사용되는 표기법에는 <strong>빅 오 (Big-O Notation)</strong>, <strong>빅 오메가(Big-Ω Notation)</strong>, <strong>빅 세타(Big-Θ Notation)</strong>이 있습니다.</p>\n<p>이 분석 방법은 유일한 분석법도 아니고 가장 좋은 분석법도 아니지만, 상대적으로 간단하며 알고리즘 실행환경에 비의존적(independent)이므로 가장 광범위하게 사용되는 분석법입니다.</p>\n<ul>\n<li><strong>Big-O 표기법</strong>: 수행 시간의 <em>상한선</em>을 표현합니다. 예를 들어, 길이가 <code class=\"language-text\">n</code>인 배열의 모든 원소를 한 번씩 순차적으로 프린트하는 알고리즘을 흔히 <code class=\"language-text\">O(n)</code> 으로 표기하지만, <code>O(n<sup>2</sup>)</code>, <code>O(n<sup>3</sup>)</code>, <code>O(2<sup>n</sup>)</code>으로 표현할 수 도 있습니다. 즉, 시간 복잡도를 Big-O로 표현하면 “알고리즘이 <em>적어도</em> 이 정도 빠르기로 동작한다” 라고 표현하는 것과 같습니다.</li>\n<li><strong>Big-Ω 표기법</strong>: Big-O 표기법과 비슷하지만, Big-Ω의 경우 상한선이 아닌 <em>하한선</em>을 의미합니다. Big-O에서 들었던 예의 경우, <code class=\"language-text\">Ω(n)</code>으로 표현할 수도 있고, <code class=\"language-text\">Ω(log n)</code>, 혹은 <code class=\"language-text\">Ω(1)</code>로 표현할 수 있습니다. 즉, “알고리즘이 이것보단 빠르게 동작하지는 않는다” 라고 표현하는 것입니다.</li>\n<li><strong>Big-Θ 표기법</strong>: Big-Θ 표기법은 Big-O와 Big-Ω를 둘 다 만족하는 경우라고 볼 수 있습니다. 즉, 어떤 알고리즘이 <code class=\"language-text\">O(n)</code> 이고 <code class=\"language-text\">Ω(n)</code> 이면 <code class=\"language-text\">Θ(n)</code> 입니다.</li>\n</ul>\n<p>흔히 알고리즘의 수행시간을 분석할 때 Big-O를 사용하는데, 그 이유는</p>\n<ul>\n<li>Big-Ω의 경우, 알고리즘 수행 시간의 하한선, 즉 “이것보단 빠를 수 없다”를 나타내는데, 이는 대개 유용하지 않습니다. 보통 우리는 알고리즘이 “제일 느리게 동작할 때는 어느 정도로 동작하는지”에 관심이 있기 때문입니다. 알고리즘이 느리게 동작하는 것이 문제이지 빠르게 동작하는 게 문제인 경우는 사실상 없으니까요!</li>\n<li>Big-Θ의 경우 상한, 하한의 개념이 아니라 실행 시간에 대해 “근접한 한계값(tight bound)“이 있다고 표현하는 것입니다. 하지만 이 “근접한 한계값”을 구하는 게 상한을 구하는 것보다 어려울 수 있고, 실제로 알고리즘을 분석할 때 대게 실행 시간의 “상한”에 관한 정보로도 충분하기 때문입니다.</li>\n</ul>\n<h3 id=\"big-o-표기-예시\" style=\"position:relative;\"><a href=\"#big-o-%ED%91%9C%EA%B8%B0-%EC%98%88%EC%8B%9C\" aria-label=\"big o 표기 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Big-O 표기 예시</h3>\n<p>Big-O로 시간 복잡도를 표현할 때는 <em>최고차항</em>만을 표기하며, 상수항은 무시합니다. 예를 들어, 입력 데이터 <code class=\"language-text\">n</code>에 대해 <code>12n<sup>2</sup>+ 4n + 7</code> 만큼 연산을 수행하는 함수가 있다고 한다면 이 함수의 시간 복잡도는 최고차항인 <code>12n<sup>2</sup></code>만을 고려하며 특히 이 중에서도 상수항을 제외한 <code>n<sup>2</sup></code> 만을 고려합니다. 따라서 이 함수의 시간복잡도는 <code>O(n<sup>2</sup>)</code>이 됩니다.</p>\n<p>대표적인 Big-O 표기법의 종류는 다음과 같습니다:</p>\n<ul>\n<li><strong>O(1)</strong>: 입력값에 관계없이 실행 시간이 일정한, 최고의 알고리즘 이라 할 수 있습니다. 하지만 만약 상수값이 <em>매우 매우</em> 크다면 사실상 일정한 실행 시간의 의미가 없을 수 있습니다. 최고의 알고리즘이 될 수 있지만, 그만큼 신중해야 합니다. 알고리즘의 예시로는 인덱스를 통한 배열 요소 접근 (<code class=\"language-text\">arr[1]</code>)이 있습니다.</li>\n<li><strong>O(log n)</strong>: 입력값 n에 대해 시간이 log n의 비율로 증가합니다. 일반적으로 로그의 밑(base)은 2를 사용합니다. 대표적인 예로는 이진 탐색이 있습니다.</li>\n<li><strong>O(n)</strong>: 입력값 n에 대해 <em>선형적으로</em> 시간이 증가합니다. 즉, 수행 시간이 입력값에 비례한다고 할 수 있습니다. 정렬되지 않은 배열에서 최대값 혹은 최소값을 찾는 경우가 이에 해당합니다.</li>\n<li><strong>O(n log n)</strong>: 병합 정렬을 비롯한 대부분의 효율이 좋은 정렬 알고리즘이 이에 해당합니다.</li>\n<li><strong>O(n<sup>2</sup>)</strong>: 버블 정렬 같은 비효율적인 정렬 알고리즘이 이에 해당합니다.</li>\n<li><strong>O(2<sup>n</sup>)</strong>: 피보나치 수를 재귀적으로 계산하는 알고리즘이 이에 해당합니다.</li>\n<li><strong>O(n!)</strong>: 외판원 문제 (TSP)를 브루트 포스로 풀 경우 이에 해당합니다. 입력값이 조금만 커져도 수행 시간이 무자비하게 증가하게 됩니다.</li>\n</ul>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/algorithms/algorithm-analysis/time_complexity_comparison.png\" alt=\"Time complexity comparison\">\n    <figcaption>시간 복잡도 비교 그래프. 수치를 정확히 비교한 것이 아니라 근사치를 나타낸 것입니다.</figcaption>\n</figure>\n<table>\n<thead>\n<tr>\n<th><strong>number of n</strong></th>\n<th><strong>n</strong></th>\n<th><strong>n log n</strong></th>\n<th><strong>n<sup>2</sup></strong></th>\n<th><strong>n<sup>3</sup></strong></th>\n<th><strong>2<sup>n</sup></strong></th>\n<th><strong>n<sup>!</sup></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>n=10</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>4 sec</td>\n</tr>\n<tr>\n<td>n=30</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>18 min</td>\n<td>10<sup>25</sup> years</td>\n</tr>\n<tr>\n<td>n=50</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>36 years</td>\n<td>very long</td>\n</tr>\n<tr>\n<td>n=100</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>1 sec</td>\n<td>10<sup>17</sup> years</td>\n<td>very long</td>\n</tr>\n<tr>\n<td>n=1,000</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>1 sec</td>\n<td>18 min</td>\n<td>very long</td>\n<td>very long</td>\n</tr>\n<tr>\n<td>n=10,000</td>\n<td>&#x3C; 1 sec</td>\n<td>&#x3C; 1 sec</td>\n<td>2 min</td>\n<td>12 days</td>\n<td>very long</td>\n<td>very long</td>\n</tr>\n<tr>\n<td>n=100,000</td>\n<td>&#x3C; 1 sec</td>\n<td>2 sec</td>\n<td>3 hours</td>\n<td>32 years</td>\n<td>very long</td>\n<td>very long</td>\n</tr>\n<tr>\n<td>n=1,000,000</td>\n<td>1 sec</td>\n<td>20 sec</td>\n<td>12 days</td>\n<td>31, 710 years</td>\n<td>very long</td>\n<td>very long</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"공간-복잡도-space-complexity\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84-space-complexity\" aria-label=\"공간 복잡도 space complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>공간 복잡도 (Space Complexity)</h3>\n<p>지금까지는 시간 복잡도를 표현하는 방법에 대해 알아보았는데, Big-O는 시간 복잡도 외에도 공간 복잡도를 표현하는 데에도 널리 쓰입니다. 즉, 시간 복잡도에서와같이 입력값 <code class=\"language-text\">n</code>에 대해 공간 복잡도가 <code class=\"language-text\">O(n)</code>이면 해당 알고리즘은 입력값에 비례하여 메모리를 사용한다는 뜻이 됩니다.</p>\n<p>또, 알고리즘은 흔히 “시간과 공간이 trade-off” 관계에 있다고 하는데, 즉 실행 시간이 빠른 알고리즘은 그만큼 공간(메모리)를 많이 사용하고, 반대로 공간을 적게 사용하는 알고리즘은 그만큼 실행 시간이 느리다는 뜻입니다. 물론 실행 시간이 빠르면서도 공간을 적게 사용하는 알고리즘이 있긴 하지만, 대부분의 경우 시간과 공간은 trade-off 관계에 있다고 할 수 있습니다.</p>","frontmatter":{"title":"알고리즘 분석","date":"January 03, 2022","category":"Algorithms"}}},"pageContext":{"slug":"/algorithms/algorithm-analysis/","previous":{"fields":{"slug":"/algorithms/recurrence-relation/"},"frontmatter":{"title":"점화식"}},"next":{"fields":{"slug":"/javascript/max-values/"},"frontmatter":{"title":"자바스크립트 MAX_SAFE_INTEGER와 MAX_VALUE"}}}},"staticQueryHashes":[]}