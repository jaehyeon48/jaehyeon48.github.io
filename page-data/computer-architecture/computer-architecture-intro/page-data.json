{"componentChunkName":"component---src-templates-blog-post-js","path":"/computer-architecture/computer-architecture-intro/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"3f1b7dcd-2be5-5d7c-8cee-e647bbbca489","excerpt":"Architecture and Organization 흔히 컴퓨터를 설명할 때, 컴퓨터 구조(Computer architecture)와 컴퓨터 구성(Computer organization)을 구분하는 경우가 있습니다. : 개발자가 바라보는 특성에 관한 것으로, 프로그램의 논리적인 실행에 직접적인 영향을 주는 특성을 일컫는 말입니다. 흔히 ISA(Instruction Set Architecture)라고도 하는데, ISA는 명령어 형식, opcode…","html":"<h2 id=\"architecture-and-organization\" style=\"position:relative;\"><a href=\"#architecture-and-organization\" aria-label=\"architecture and organization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Architecture and Organization</h2>\n<p>흔히 컴퓨터를 설명할 때, <strong>컴퓨터 구조(Computer architecture)</strong>와 <strong>컴퓨터 구성(Computer organization)</strong>을 구분하는 경우가 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">Computer architecture</code>: 개발자가 바라보는 특성에 관한 것으로, 프로그램의 논리적인 실행에 직접적인 영향을 주는 특성을 일컫는 말입니다. 흔히 <strong>ISA(Instruction Set Architecture)</strong>라고도 하는데, ISA는 명령어 형식, opcode, 레지스터, 명령 실행 결과가 레지스터와 메모리에 미치는 영향, 명령 실행을 제어하는 알고리즘 등을 정의합니다. 구조적 특성의 예시로는 instruction set, 다양한 데이터 타입을 표현하는 데 사용되는 비트 수, I/O 메커니즘, 메모리 addressing 방식 등이 있습니다.</li>\n<li><code class=\"language-text\">Computer organization</code>: 컴퓨터 구조에서 정의한 특성들을 실제로 어떻게 “구현”할 것인가에 관한 것으로, 컨트롤 시그널, 컴퓨터와 주변 장치들(peripherals) 사이의 인터페이스, 메모리 기술 등 프로그래머에게는 보이지 않는 하드웨어 세부 사항들에 관한 내용입니다.</li>\n</ul>\n<p>즉, <code class=\"language-text\">컴퓨터 구조</code>는 논리적인 내용과 관련되어 있고, <code class=\"language-text\">컴퓨터 구성</code>은 하드웨어적인 내용과 관련 있다고 할 수 있습니다. 예를 들어 곱셈 연산에 대해 생각해볼 때, 구조적인 관점에서는 “instruction set에 곱셈 명령을 포함할 것인지?”에 대해 관심을 가지고, 구성적인 관점에서는 곱셈 명령을 구현할 때 덧셈을 반복해서 곱셈을 구현할지, 혹은 전용 곱셈 장치로 구현할지에 관해 관심을 가집니다.</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@main/assets/images/computer-architecture/computer-architecture-intro/computer-architecture-vs-organization.png\" alt=\"컴퓨터 구조 vs. 컴퓨터 구성\">\n    <figcaption>컴퓨터 구조 vs. 컴퓨터 구성. 출처: https://www.geeksforgeeks.org/differences-between-computer-architecture-and-computer-organization/</figcaption>\n</figure>\n<p>이를 표로 정리해보면 다음과 같습니다:</p>\n<table>\n<thead>\n<tr>\n<th><strong>Computer Architecture</strong></th>\n<th><strong>Computer Organization</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>컴퓨터가 <strong>무엇 (what)</strong>을 하는지에 대해 설명.</td>\n<td>컴퓨터가 <strong>어떻게 (how)</strong> 하는지에 대해 설명.</td>\n</tr>\n<tr>\n<td>컴퓨터 시스템의 기능 동작(functional behavior)에 대해 다룸.</td>\n<td>컴퓨터 시스템의 구조적 관계(structural relationship)에 대해 다룸.</td>\n</tr>\n<tr>\n<td>high-level 설계 이슈를 다룸.</td>\n<td>low-level 설계 이슈를 다룸.</td>\n</tr>\n</tbody>\n</table>\n<br />\n<p>쉽게 말해, organization은 컴퓨터의 동작을 논리적으로 정의한 architecture를 구현한 것이라고 할 수 있는데, 이와 같이 논리적인 레벨을 다루는 architecture와, 하드웨어 레벨을 다루는 organization을 나눔으로써 architecture는 그대로 유지하되 시대에 따라 발전하는 하드웨어에 맞춰 이를 구현하는 organization을 변경하는 방식을 사용할 수 있습니다.</p>\n<h2 id=\"구조structure와-기능function\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0structure%EC%99%80-%EA%B8%B0%EB%8A%A5function\" aria-label=\"구조structure와 기능function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>구조(Structure)와 기능(Function)</h2>\n<p>컴퓨터는 매우 복잡한 시스템이므로, 이를 제대로 이해하기 위해선 (다른 복잡한 시스템에도 존재하는) 계층적인 특성을 이해할 필요가 있습니다.</p>\n<p>어떤 복잡한 시스템을 설계할 땐 계층적인 특성(hierarchical nature)이 반드시 포함됩니다. 이를 통해 시스템 설계자는 복잡한 시스템 전체가 아니라 특정 레벨의 계층만 다루면 되므로 시스템을 관리하기가 수월합니다.</p>\n<p>각 계층은 여러 컴포넌트가 서로 의존하는 관계로 구성되는데, 각 계층의 동작은 바로 아래 계층의 단순화되고 추상화된 특성에 의존합니다.</p>\n<p>시스템 설계자는 계층마다 아래의 두 가지를 고려해야 합니다:</p>\n<ul>\n<li><code class=\"language-text\">기능(Function)</code>: 구조의 일부로서 개별 구성 요소의 동작을 의미합니다.</li>\n<li><code class=\"language-text\">구조(Structure)</code>: 각 컴포넌트가 서로 연관된 방식을 의미합니다.</li>\n</ul>\n<h3 id=\"기능function\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5function\" aria-label=\"기능function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>기능(Function)</h3>\n<p>컴퓨터의 기능과 구조는 사실 단순합니다. 일반적으로, 컴퓨터가 수행하는 기능을 크게 4가지로 분류할 수 있습니다:</p>\n<ul>\n<li><code class=\"language-text\">데이터 처리(Data processing)</code>: 데이터의 형태가 무궁무진하고 이를 처리하는 방식도 다양하지만, 데이터를 처리하는 몇 가지 기본적인 방식만 살펴볼 예정입니다.</li>\n<li><code class=\"language-text\">데이터 저장소(Data storage)</code>: 컴퓨터에는 어떤 연산을 실행하는 도중에 중간 결과물을 임시로 저장하는 저장소가 존재하고, 이러한 결과물을 장기적으로 저장하는 저장소 또한 존재합니다.</li>\n<li><code class=\"language-text\">데이터 이동(Data movement)</code>: 컴퓨터의 동작 환경은 어떤 연산의 입력이 되는 장치와 이 연산의 결과물을 출력하는 장치들로 구성됩니다. 이처럼 컴퓨터와 직접 연결된 <strong>주변 장치(peripheral)</strong>로 부터 데이터를 가져오거나 주변 장치로 데이터를 내보내는 작업을 <strong>I/O(Input/Output)</strong> 작업이라고 합니다. 만약 주변 장치가 아니라 네트워크 등을 통해 멀리 떨어진 장치와 데이터를 주고 받는 경우, 이를 <strong>데이터 통신(data communication)</strong>이라고 합니다.</li>\n<li><code class=\"language-text\">제어(Control)</code>: 컴퓨터 내의 제어 장치는 컴퓨터의 자원을 관리하고, 명령어에 따라 각 자원들의 동작을 조정합니다.</li>\n</ul>\n<h3 id=\"structure\" style=\"position:relative;\"><a href=\"#structure\" aria-label=\"structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Structure</h3>\n<p>이제 일반적인 컴퓨터의 내부 구조를 살펴봅시다. 우선 싱글 프로세서부터 살펴보고 멀티코어로 넘어가겠습니다.</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@main/assets/images/computer-architecture/computer-architecture-intro/top-level-structure-of-computer.png\" alt=\"일반적인 컴퓨터 구조\">\n    <figcaption>일반적인 컴퓨터 구조. 출처: Computer Organization and Architecture 10th Edition</figcaption>\n</figure>\n<ul>\n<li>\n<p><code class=\"language-text\">CPU(Central Processing Unit)</code>: 컴퓨터의 동작을 제어(현재 상태값을 저장, 정보 해석)하고, 데이터를 처리하는 역할을 합니다. 간단히 <strong>프로세서(processor)</strong>라고도 부릅니다. CPU의 주요 구성 요소는 다음과 같습니다:</p>\n<ul>\n<li><code class=\"language-text\">제어 장치(Control unit)</code>: CPU의 동작을 제어합니다.</li>\n<li><code class=\"language-text\">산술·논리 장치(Arithmetic Logic Unit, ALU)</code>: 말 그대로, 덧셈·뺄셈과 같은 산술 연산과 논리 연산(AND, OR, XOR, …)을 수행하는 장치입니다.</li>\n<li><code class=\"language-text\">레지스터(Register)</code>: CPU 내에 존재하는 임시 저장장치로, 크기가 작지만 매우 빠릅니다.</li>\n<li><code class=\"language-text\">CPU interconnection</code>: 제어 장치, ALU, 레지스터 간의 통신 메커니즘입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">주기억장치(Main memory)</code>: CPU가 접근하여 처리할 수 있는 기억 장치로, 데이터와 명령어가 저장됩니다. 흔히 <strong>RAM(Random Access Memory)</strong>라고 부릅니다.</li>\n<li><code class=\"language-text\">입출력장치(I/O)</code>: 키보드, 마우스, 모니터 등 컴퓨터가 처리하기 위한 데이터를 읽고 그 결과물을 출력하는 장치들을 말합니다.</li>\n<li><code class=\"language-text\">System interconnection</code>: CPU, 메인 메모리, I/O장치 간의 통신 메커니즘으로, (전선으로 구성된) <strong>시스템 버스(system bus)</strong>가 대표적인 예시입니다.</li>\n</ul>\n<br />\n<p>현대 컴퓨터들의 특징 중 하나가 멀티 프로세서(즉, 멀티코어)이고, 또 다른 특징 중 하나는 <strong>캐시 메모리(cache memory)</strong>라고 하는 작고 빠른 메모리를 CPU와 메인 메모리 사이에 여러 개 두어 메모리 계층을 이룬다는 점입니다. 이 캐시 메모리에는 가까운 미래에 사용될 가능성이 높은 데이터들을 저장함으로써 컴퓨터 성능 향상을 꾀하는데, 이때 캐시 메모리가 CPU에 가까울수록 빠르고 용량이 작고, 멀수록 느리고 용량이 큽니다.</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@main/assets/images/computer-architecture/computer-architecture-intro/major-elements-of-multicore-computer.png\" alt=\"멀티코어 컴퓨터의 주요 구성 요소\">\n    <figcaption>멀티코어 컴퓨터의 주요 구성 요소. 출처: Computer Organization and Architecture 10th Edition</figcaption>\n</figure>\n<p>위 그림에서 볼 수 있듯이, 임베디드 컴퓨터, 스마트폰, 태블릿 등을 포함한 대부분의 컴퓨터 장치들은 <strong>마더보드(Motherboard)</strong>에 들어있습니다. 이러한 구성을 살펴보기 전에 몇 가지 용어를 살펴보겠습니다:</p>\n<ul>\n<li><code class=\"language-text\">인쇄 회로 기판(Printed circuit board, PCB)</code>: 집적 회로, 스위치 등의 전기적 부품들이 납땜 되는 얇은 판으로, 흔히 생각하는 초록색 판입니다.</li>\n<li><code class=\"language-text\">마더보드(Motherboard)</code>: 컴퓨터에 있는 PCB들 중에서 메인 PCB를 가리킵니다.</li>\n<li><code class=\"language-text\">확장 보드(expansion board)</code>: 컴퓨터 시스템에 기능을 추가할 목적으로 확장 슬롯에 꽂는 PCB를 가리킵니다.</li>\n<li><code class=\"language-text\">Chip</code>: 주로 실리콘으로 만들어져 전자 회로와 논리 게이트들이 집적되는 반도체로, 이 결과물을 <strong>집적 회로(Integrated Circuit, IC)</strong>라고 합니다.</li>\n</ul>\n<p>마더보드는 프로세서를 위한 슬롯(혹은 소켓), 메모리를 위한 슬롯, I/O 컨트롤러 칩, 그리고 다른 주요 컴퓨터 하드웨어 요소들로 이루어져 있습니다.</p>\n<h2 id=\"레퍼런스\" style=\"position:relative;\"><a href=\"#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-label=\"레퍼런스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>레퍼런스</h2>\n<ul>\n<li><a href=\"https://www.amazon.com/Computer-Organization-Architecture-William-Stallings/dp/0134101618/ref=sr_1_3?crid=254TMAUZ6SF0Z&#x26;keywords=Computer+Organization+and+Architecture&#x26;qid=1655859599&#x26;s=books&#x26;sprefix=computer+organization+and+architecture%2Cstripbooks-intl-ship%2C242&#x26;sr=1-3\" target=\"_blank\" rel=\"noreferrer noopener\">Computer Organization and Architecture 10th Edition</a></li>\n</ul>","frontmatter":{"title":"컴퓨터 구조 개론","date":"March 22, 2021","category":"Computer Architecture"}}},"pageContext":{"slug":"/computer-architecture/computer-architecture-intro/","previous":{"fields":{"slug":"/os/ipc/"},"frontmatter":{"title":"프로세스간 통신, IPC"}},"next":{"fields":{"slug":"/computer-architecture/performance-issues/"},"frontmatter":{"title":"컴퓨터 구조 - 성능 이슈"}}}},"staticQueryHashes":["3128451518"]}