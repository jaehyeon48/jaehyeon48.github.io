{"componentChunkName":"component---src-templates-blog-post-js","path":"/computer-architecture/interconnection-structures/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"c7f8a9ef-7323-5ed0-b1a7-b77193e388be","excerpt":"컴퓨터는 기본적으로 CPU, 메모리, I/O장치와 같은 여러 개의 기본 모듈(컴포넌트)이 서로 연결된 네트워크라고 할 수 있는데, 이러한 모듈간에 서로 소통하기 위해선 모듈을 연결하는 장치가 필요한데, 이렇게 모듈을 연결하는 장치의 집합을 연결 구조(interconnection structure)라고 합니다. 이 포스트에선 컴퓨터의 기본 모듈들이 어떻게 서로 연결되어 있는지를 살펴보겠습니다. 메모리 모듈 일반적으로, 메모리 모듈은 동일한 크기의 개의 워드(CPU…","html":"<p>컴퓨터는 기본적으로 CPU, 메모리, I/O장치와 같은 여러 개의 기본 모듈(컴포넌트)이 서로 연결된 네트워크라고 할 수 있는데, 이러한 모듈간에 서로 소통하기 위해선 모듈을 연결하는 장치가 필요한데, 이렇게 모듈을 연결하는 장치의 집합을 <strong>연결 구조(interconnection structure)</strong>라고 합니다. 이 포스트에선 컴퓨터의 기본 모듈들이 어떻게 서로 연결되어 있는지를 살펴보겠습니다.</p>\n<h2 id=\"메모리-모듈\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%AA%A8%EB%93%88\" aria-label=\"메모리 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>메모리 모듈</h2>\n<p>일반적으로, 메모리 모듈은 동일한 크기의 <code class=\"language-text\">N</code>개의 워드(CPU가 한 번에 처리할 수 있는 데이터의 크기)로 구성되어 있고, 각 워드에는 고유한 숫자 주소가 부여됩니다. 또한, <code class=\"language-text\">read</code> 혹은 <code class=\"language-text\">write</code> 시그널을 통해 하나의 워드 만큼의 데이터를 메모리에 읽고 쓸 수 있습니다. </p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@main/assets/images/computer-architecture/interconnection-structures/memory-module.png\" alt=\"메모리 모듈\">\n    <figcaption>메모리 모듈. 출처: Computer Organization and Architecture 10th Edition</figcaption>\n</figure>\n<h2 id=\"io-모듈\" style=\"position:relative;\"><a href=\"#io-%EB%AA%A8%EB%93%88\" aria-label=\"io 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>I/O 모듈</h2>\n<p>컴퓨터의 내부적인 관점에서 보자면, I/O 모듈은 메모리와 흡사합니다. <code class=\"language-text\">read</code>와 <code class=\"language-text\">write</code> 동작이 존재하며, 일반적으로 한 개 이상의 외부 장치를 제어합니다.</p>\n<p><em>포트</em>를 통해 외부 장치에 대한 각 인터페이스를 참조할 수 있고, 각 인터페이스에 고유한 주소 (0, 1, …, M - 1)을 부여합니다. 또한, I/O모듈은 CPU에게 인터럽트 시그널을 보낼 수 있습니다.</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@main/assets/images/computer-architecture/interconnection-structures/io-module.png\" alt=\"I/O 모듈\">\n    <figcaption>I/O 모듈. 출처: Computer Organization and Architecture 10th Edition</figcaption>\n</figure>\n<h2 id=\"cpu-모듈\" style=\"position:relative;\"><a href=\"#cpu-%EB%AA%A8%EB%93%88\" aria-label=\"cpu 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>CPU 모듈</h2>\n<p>CPU는 명령어와 데이터를 읽고 처리한 다음, 결과를 메모리에 기록합니다. 시스템 전체의 동작을 제어하기 위해 제어 시그널을 사용하며, 인터럽트 시그널을 받습니다.</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@main/assets/images/computer-architecture/interconnection-structures/cpu-module.png\" alt=\"CPU 모듈\">\n    <figcaption>CPU 모듈. 출처: Computer Organization and Architecture 10th Edition</figcaption>\n</figure>\n<hr />\n<p>또한 연결 구조는 다음과 같은 전송 타입을 제공해야 합니다:</p>\n<ul>\n<li><code class=\"language-text\">메모리 → 프로세서</code>: CPU가 메모리로 부터 데이터 혹은 명령어를 읽습니다.</li>\n<li><code class=\"language-text\">프로세서 → 메모리</code>: CPU가 메모리에 데이터를 기록합니다.</li>\n<li><code class=\"language-text\">I/O → 프로세서</code>: CPU가 I/O 모듈을 통해 I/O 장치로부터 데이터를 읽습니다.</li>\n<li><code class=\"language-text\">프로세서 → I/O</code>: CPU가 I/O 장치에 데이터를 전송합니다.</li>\n<li><code class=\"language-text\">I/O → 메모리, 혹은 메모리 → I/O</code>: CPU를 거치지 않고 메모리와 I/O장치가 직접 데이터를 주고 받습니다. 이를 <strong>DMA(Direct Memory Access)</strong>라고 하는데, 이와 관련해선 추후에 살펴보겠습니다.</li>\n</ul>\n<h2 id=\"버스-연결\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EC%8A%A4-%EC%97%B0%EA%B2%B0\" aria-label=\"버스 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>버스 연결</h2>\n<p><strong>버스(Bus)</strong>란, 두 개 혹은 그 이상의 장치들을 연결하는 통신 통로(communication pathway)입니다. 버스는 여러 장치들이 버스에 연결되어 하나의 장치가 버스를 통해 신호를 보내면 버스에 연결된 모든 장치들이 해당 신호를 받을 수 있다는 <strong>공유 전달 매개체(shared transmission medium)</strong>의 특징을 가지고 있습니다. 하지만 이로 인해 두 개(혹은 그 이상)의 장치가 동시에 신호를 전송하면 그 신호들간에 혼선이 발생할 수 있습니다.</p>\n<p>일반적으로 버스는 0과 1을 나타내는 신호들을 전송할 수 있는 라인(전선) 여러 개로 구성됩니다. 예를 들어, 8비트 데이터는 8개의 버스 라인을 통해 전송할 수 있습니다.</p>\n<p>일반적인 컴퓨터 시스템에는 여러 개의 버스들이 존재하고, 이 버스들이 <strong>버스 계층(bus hierarchy)</strong>를 구성합니다. 이때 주요 컴포넌트(CPU, 메모리, I/O)를 연결하는 버스를 <strong>시스템 버스(system bus)</strong>라고 합니다.</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@main/assets/images/computer-architecture/interconnection-structures/bus-hierarchy-comparison.png\" alt=\"버스 계층 구조 비교\">\n    <figcaption>버스 계층 구조 비교. 출처: http://csac31.blogspot.com/2015/</figcaption>\n</figure>\n<p>또한 모듈들 간에 데이터를 전송하는 버스를 <strong>데이터 버스(data bus)</strong>라고 하는데, 데이터 버스는 32, 64, 128, 혹은 더 많은 개수의 라인들로 구성되어 있습니다. 이때 데이터 버스를 구성하는 라인의 개수를 <em>데이터 버스의 너비(width)</em> 라고 합니다.</p>\n<p>데이터 버스의 width는 시스템 전체의 성능을 좌우하는 주요 요인인데, 예를 들어 너비가 32비트이고 각 명령어의 크기가 64비트라면 CPU는 한 명령 사이클당 두 번의 메모리 참조를 수행해야 합니다. 대부분 버스의 width는 CPU가 몇 비트이냐에 따라 결정되는데, 32비트 CPU이면 버스의 너비도 32비트, 64비트 CPU이면 너비도 64비트… 와 같은 방식으로 결정됩니다.</p>\n<br />\n<p><strong>주소 버스(address bus)</strong>는 source 데이터 혹은 데이터가 저장될 위치를 지정하기 위해 사용됩니다. 예를 들어, CPU가 메모리로 부터 한 워드 사이드 만큼의 데이터를 읽고자 할 때, CPU는 주소 버스에 원하는 데이터의 주소를 입력함으로써 데이터를 불러옵니다.</p>\n<p>주소 버스의 width는 시스템의 최대 메모리 용량(capacity)을 결정하는데, 만약 주소 버스의 width가 32비트이면 버스를 통해 지정할 수 있는 최대 주소도 2<sup>32</sup> - 1 바이트, width가 64비트이면 2<sup>64</sup> -1 바이트가 됩니다.</p>\n<p>또한, I/O 포트의 주소를 지정할 때도 주소 버스가 사용되는데, 어떤 기준보다 값이 큰 비트는 버스에 연결된 모듈 중에 특정 모듈을 선택할 때 사용되고, 기준보다 값이 작은 비트는 메모리 주소 혹은 I/O 포트를 선택할 때 사용됩니다. 예를 들어, 8비트 주소 버스에서 <code class=\"language-text\">01111111</code> 이하의 주소는 메모리 모듈의 위치를 참조할 때, <code class=\"language-text\">10000000</code>이상의 주소는 I/O 모듈에 연결된 장치를 선택할 때 사용되는 방식입니다.</p>\n<br />\n<p>데이터와 주소 버스는 모든 컴포넌트가 같이 사용하기 때문에, <strong>컨트롤 버스(control bus)</strong>를 이용하여 데이터와 주소 버스를 제어합니다.</p>\n<p>컨트롤 버스를 통해 전송되는 신호 중, 제어 신호는 명령(command)과 시기 정보(timing information)을 전송하고, 타이밍 신호는 데이터와 주소 정보의 유효성(validity)을 나타내며, 명령 신호는 수행하고자 하는 동작을 나타낼 때 사용됩니다.</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@main/assets/images/computer-architecture/interconnection-structures/bus-interconnection-scheme.png\" alt=\"버스 연결 구조\">\n    <figcaption>버스 연결 구조. 출처: Computer Organization and Architecture 10th Edition</figcaption>\n</figure>\n<h2 id=\"레퍼런스\" style=\"position:relative;\"><a href=\"#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-label=\"레퍼런스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>레퍼런스</h2>\n<ul>\n<li><a href=\"https://www.amazon.com/Computer-Organization-Architecture-William-Stallings/dp/0134101618/ref=sr_1_3?crid=254TMAUZ6SF0Z&#x26;keywords=Computer+Organization+and+Architecture&#x26;qid=1655859599&#x26;s=books&#x26;sprefix=computer+organization+and+architecture%2Cstripbooks-intl-ship%2C242&#x26;sr=1-3\" target=\"_blank\" rel=\"noreferrer noopener\">Computer Organization and Architecture 10th Edition</a></li>\n</ul>","frontmatter":{"title":"컴퓨터 연결 구조","date":"March 29, 2021","category":"Computer Architecture"}}},"pageContext":{"slug":"/computer-architecture/interconnection-structures/","previous":{"fields":{"slug":"/computer-architecture/what-is-a-clock/"},"frontmatter":{"title":"클럭이란 무엇일까?"}},"next":{"fields":{"slug":"/computer-architecture/computer-memory-system/"},"frontmatter":{"title":"컴퓨터의 메모리 시스템"}}}},"staticQueryHashes":["3128451518"]}