{"componentChunkName":"component---src-templates-blog-post-js","path":"/nginx/configure-nginx-on-ubuntu-2004/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"d4ba6087-d273-5bbc-94f6-3c8ab960da64","excerpt":"이 포스트는 프로젝트를 배포하는 과정에서 참고한 여러 개의 포스트를 종합한 글입니다. Ubuntu 20.04에 Nginx 설치하기 Nginx 설치 방화벽 설정 위 명령을 실행하면 아래와 같은 리스트가 출력됩니다: 각 설정이 의미하는 바는 다음과 같습니다: Nginx HTTP: 포트 80번만 허용 Nginx HTTPS: 포트 443번만 허용 Nginx Full: 포트 80, 44…","html":"<p>이 포스트는 프로젝트를 배포하는 과정에서 참고한 여러 개의 포스트를 종합한 글입니다.</p>\n<h2 id=\"ubuntu-2004에-nginx-설치하기\" style=\"position:relative;\"><a href=\"#ubuntu-2004%EC%97%90-nginx-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"ubuntu 2004에 nginx 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>Ubuntu 20.04에 Nginx 설치하기</h2>\n<ol>\n<li><strong>Nginx 설치</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nginx</code></pre></div>\n<ol start=\"2\">\n<li><strong>방화벽 설정</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw app list</code></pre></div>\n<p>위 명령을 실행하면 아래와 같은 리스트가 출력됩니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Available applications:\n  Nginx Full\n  Nginx HTTP\n  Nginx HTTPS\n  OpenSbash</code></pre></div>\n<p>각 설정이 의미하는 바는 다음과 같습니다:</p>\n<ul>\n<li><strong>Nginx HTTP</strong>: 포트 80번만 허용</li>\n<li><strong>Nginx HTTPS</strong>: 포트 443번만 허용</li>\n<li><strong>Nginx Full</strong>: 포트 80, 443번 허용</li>\n</ul>\n<p>방화벽 설정을 적용하는 방법은 다음과 같습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token string\">'Nginx HTTP'</span></code></pre></div>\n<p>이후 아래 명령어를 입력하여 상태를 체크합니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw status</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Status: active\n\nTo                         Action      From\n--                         ------      ----\nNginx HTTP                 ALLOW       Anywhere\nNginx HTTP <span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span>            ALLOW       Anywhere <span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">)</span></code></pre></div>\n<p>만약 방화벽이 <code class=\"language-text\">inactive</code> 상태라면 아래 명령어를 입력하여 활성화 합니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw <span class=\"token builtin class-name\">enable</span></code></pre></div>\n<ol start=\"3\">\n<li><strong>Nginx 상태 체크</strong></li>\n</ol>\n<p>위 과정을 거치면 우분투가 Nginx를 실행합니다. 이때 아래 명령어를 실행하여 정상적으로 실행 중인지 체크할 수 있습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">systemctl status nginx</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">● nginx.service - A high performance web server and a reverse proxy server\n     Loaded: loaded <span class=\"token punctuation\">(</span>/lib/systemd/system/nginx.service<span class=\"token punctuation\">;</span> enabled<span class=\"token punctuation\">;</span> vendor preset: enabled<span class=\"token punctuation\">)</span>\n     Active: active <span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span> since Wed <span class=\"token number\">2022</span>-04-20 09:03:47 UTC<span class=\"token punctuation\">;</span> 24h ago\n       Docs: man:nginx<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n   Main PID: <span class=\"token number\">20596</span> <span class=\"token punctuation\">(</span>nginx<span class=\"token punctuation\">)</span>\n      Tasks: <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>limit: <span class=\"token number\">1147</span><span class=\"token punctuation\">)</span>\n     Memory: <span class=\"token number\">5</span>.4M\n     CGroup: /system.slice/nginx.service\n             ├─20596 nginx: master process /usr/sbin/nginx -g daemon on<span class=\"token punctuation\">;</span> master_process on<span class=\"token punctuation\">;</span>\n             └─20597 nginx: worker process</code></pre></div>\n<p>또한, 브라우저 주소창에 서버의 ip 혹은 도메인 이름을 입력하여 아래와 같은 기본 Nginx 랜딩 페이지가 표시되는지 살펴봅니다:</p>\n<figure>\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/nginx/configure-nginx-on-ubuntu-2004/welcome_to_nginx.png\" alt=\"Nginx 랜딩 페이지\">\n  <figcaption>Nginx 랜딩 페이지.</figcaption>\n</figure>\n<p>위 랜딩 페이지가 표시된다면 Nginx가 정상적으로 동작하고 있다는 뜻입니다.</p>\n<ol start=\"4\">\n<li><strong>Nginx 프로세스 관리 명령어</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 시작</span>\n<span class=\"token function\">sudo</span> systemctl start nginx\n\n<span class=\"token comment\"># 종료</span>\n<span class=\"token function\">sudo</span> systemctl stop nginx\n\n<span class=\"token comment\"># 재시작</span>\n<span class=\"token function\">sudo</span> systemctl restart nginx\n\n<span class=\"token comment\"># 리로드 (변경된 설정을 적용하는 경우 사용. 기존 연결을 끊지 않음.)</span>\n<span class=\"token function\">sudo</span> systemctl reload nginx\n\n<span class=\"token comment\"># 기본적으로 서버 시작 시 nginx가 자동으로 실행되는데, 이를 막고 싶은 경우</span>\n<span class=\"token function\">sudo</span> systemctl disable nginx\n\n<span class=\"token comment\"># 서버 시작 시 자동으로 nginx를 실행하고 싶은 경우</span>\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> nginx</code></pre></div>\n<ol start=\"5\">\n<li><strong>서버 블록 설정</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 디렉토리 생성:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> -p /var/www/도메인 이름/html\n\n<span class=\"token comment\"># 2. 소유자 설정:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> -R <span class=\"token environment constant\">$USER</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">$USER</span> /var/www/도메인 이름/html\n\n<span class=\"token comment\"># 3. 권한 설정:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> -R <span class=\"token number\">755</span> /var/www/도메인 이름\n\n<span class=\"token comment\"># 4. index.html 생성:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /var/www/도메인 이름/html/index.html\n\n<span class=\"token comment\"># 5. 서버 블록 생성:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/nginx/sites-available/도메인 이름\n\n<span class=\"token comment\"># 아래 내용 입력:</span>\nserver <span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    listen <span class=\"token punctuation\">[</span>::<span class=\"token punctuation\">]</span>:80<span class=\"token punctuation\">;</span>\n\n    root /var/www/도메인 이름/html<span class=\"token punctuation\">;</span>\n    index index.html index.htm index.nginx-debian.html<span class=\"token punctuation\">;</span>\n\n    server_name 도메인 이름 www.도메인 이름<span class=\"token punctuation\">;</span>\n\n    location / <span class=\"token punctuation\">{</span>\n        try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ <span class=\"token operator\">=</span><span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 6. 심볼릭 링크 생성:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /etc/nginx/sites-available/도메인 이름 /etc/nginx/sites-enabled/\n\n<span class=\"token comment\"># 7. nginx.conf 파일 설정:</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/nginx/nginx.conf\n\n<span class=\"token comment\"># 아래 내용으로 수정:</span>\n<span class=\"token punctuation\">..</span>.\nhttp <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">..</span>.\n    server_names_hash_bucket_size <span class=\"token number\">64</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token comment\"># 8. 설정 파일에 문법 오류가 없는지 검사:</span>\n<span class=\"token function\">sudo</span> nginx -t\n\n<span class=\"token comment\"># 9. Nginx 재시작:</span>\n<span class=\"token function\">sudo</span> systemctl restart nginx</code></pre></div>\n<p>이제 브라우저 주소 창에 <code class=\"language-text\">http://도메인 이름</code>을 입력하면 아까 생성한 <code class=\"language-text\">index.html</code> 의 내용이 표시됩니다.</p>\n<h2 id=\"https-적용\" style=\"position:relative;\"><a href=\"#https-%EC%A0%81%EC%9A%A9\" aria-label=\"https 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>HTTPS 적용</h2>\n<p>📌 HTTPS를 적용하고자 하는 경우, 반드시 등록된 도메인이 있어야 하고, 도메인에 대한 A 레코드가 존재해야 합니다. 또한, 위에서 설정했던 내용들이 적용되어 있어야 합니다.</p>\n<ol>\n<li><strong>Certbot 설치</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> certbot python3-certbot-nginx</code></pre></div>\n<ol start=\"2\">\n<li><strong>방화벽에서 HTTPS 허용</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token string\">'Nginx Full'</span> <span class=\"token comment\"># HTTP와 HTTPS 모두 허용</span>\n<span class=\"token function\">sudo</span> ufw delete allow <span class=\"token string\">'Nginx HTTP'</span> <span class=\"token comment\"># 기존의 HTTP 허용 설정 제거</span></code></pre></div>\n<ol start=\"3\">\n<li><strong>SSL 인증서 발급</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot --nginx -d 도메인 이름 -d www.도메인 이름</code></pre></div>\n<p>이때, 만약 처음으로 <code class=\"language-text\">certbot</code>을 실행하는 경우라면 이메일을 입력하라는 문구와 약관 동의 안내창이 뜰것입니다. 이 과정을 진행하면 <code class=\"language-text\">certbot</code>은 Let’s Encrypt 서버와 통신하여 여러분이 입력한 도메인이 유효한지 체크하는 과정을 거칩니다.</p>\n<p>체크에 성공하면 <code class=\"language-text\">certbot</code>은 아래와 같이 HTTPS 설정을 어떻게 할 것인가를 물어보게 됩니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n1: No redirect - Make no further changes to the webserver configuration.\n2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\nnew sites, or if you're confident your site works on HTTPS. You can undo this\nchange by editing your web server's configuration.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel):</code></pre></div>\n<p>위 두 가지 옵션 중 하나를 선택하시고 엔터를 누르면 아래와 같은 메시지가 뜨면서 설정이 업데이트되고 Nginx가 재시작됩니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">IMPORTANT NOTES:\n - Congratulations<span class=\"token operator\">!</span> Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/example.com/fullchain.pem\n   Your key <span class=\"token function\">file</span> has been saved at:\n   /etc/letsencrypt/live/example.com/privkey.pem\n   Your cert will expire on <span class=\"token number\">2020</span>-08-18. To obtain a new or tweaked\n   version of this certificate <span class=\"token keyword\">in</span> the future, simply run certbot again\n   with the <span class=\"token string\">\"certonly\"</span> option. To non-interactively renew *all* of\n   your certificates, run <span class=\"token string\">\"certbot renew\"</span>\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le</code></pre></div>\n<p>이제 <code class=\"language-text\">/etc/nginx/sites-available/도메인 이름</code> 파일에 접속해 보면 자동으로 적용된 설정을 보실 수 있으실 겁니다.</p>\n<ol start=\"4\">\n<li><strong>Certbot 자동 갱신 확인하기</strong></li>\n</ol>\n<p>Let’s Encrypt의 인증서는 90일 동안 유효합니다. 다행히도 <code class=\"language-text\">certbot</code> 패키지는 타이머를 설정하여 하루에 두 번 체크한 뒤 인증서 만료 기간이 30일 이내라면 자동으로 갱신합니다.</p>\n<p>이 타이머의 상태는 아래의 명령어를 통해 체크할 수 있습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status certbot.timer</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">● certbot.timer - Run certbot twice daily\n     Loaded: loaded <span class=\"token punctuation\">(</span>/lib/systemd/system/certbot.timer<span class=\"token punctuation\">;</span> enabled<span class=\"token punctuation\">;</span> vendor preset: enabled<span class=\"token punctuation\">)</span>\n     Active: active <span class=\"token punctuation\">(</span>waiting<span class=\"token punctuation\">)</span> since Mon <span class=\"token number\">2020</span>-05-04 <span class=\"token number\">20</span>:04:36 UTC<span class=\"token punctuation\">;</span> <span class=\"token number\">2</span> weeks <span class=\"token number\">1</span> days ago\n    Trigger: Thu <span class=\"token number\">2020</span>-05-21 05:22:32 UTC<span class=\"token punctuation\">;</span> 9h left\n   Triggers: ● certbot.service</code></pre></div>\n<p>자동 갱신 과정을 테스트하려면 아래의 명령어를 이용할 수 있습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot renew --dry-run</code></pre></div>\n<h2 id=\"http2-적용\" style=\"position:relative;\"><a href=\"#http2-%EC%A0%81%EC%9A%A9\" aria-label=\"http2 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>HTTP/2 적용</h2>\n<p>📌 HTTP/2를 적용하고자 하는 경우, 반드시 등록된 도메인과 서버에 TLS 설정이 적용되어 있어야 합니다.</p>\n<ol>\n<li><strong>HTTP/2 옵션 켜기</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 설정 파일 열기</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/nginx/sites-enabled/도메인 이름\n\n<span class=\"token comment\"># 아래 내용 입력 ('http2' 단어 추가)</span>\n\n<span class=\"token punctuation\">..</span>.\n    listen <span class=\"token punctuation\">[</span>::<span class=\"token punctuation\">]</span>:443 ssl http2 <span class=\"token assign-left variable\">ipv6only</span><span class=\"token operator\">=</span>on<span class=\"token punctuation\">;</span> \n    listen <span class=\"token number\">443</span> ssl http2<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token comment\"># 설정 파일 문법 체크</span>\n<span class=\"token function\">sudo</span> nginx -t</code></pre></div>\n<ol start=\"2\">\n<li><strong>안전하지 않은 Cipher Suite 제거</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 설정 파일 열기</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/nginx/sites-enabled/도메인 이름\n\n<span class=\"token comment\"># 아래 내용 주석 처리 (혹은 제거)</span>\ninclude /etc/letsencrypt/options-ssl-nginx.conf<span class=\"token punctuation\">;</span> <span class=\"token comment\"># managed by Certbot&lt;^></span>\n\n<span class=\"token comment\"># 이후 위 라인 바로 밑에 아래 내용 추가</span>\nssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:<span class=\"token operator\">!</span>MD5<span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약 self-signed 인증서를 사용하는 경우, 아래의 과정또한 수행합니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 설정 파일 열기</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/nginx/snippets/ssl-params.conf\n\n<span class=\"token comment\"># 아래 내용 찾기</span>\nssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 위 내용을 아래 내용으로 바꾸기</span>\nssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:<span class=\"token operator\">!</span>MD5<span class=\"token punctuation\">;</span></code></pre></div>\n<p>설정 과정이 끝나면 Nginx 설정을 적용합니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl reload nginx</code></pre></div>\n<ol start=\"3\">\n<li><strong>HSTS(HTTP Strict Transport Security) 설정하기</strong> </li>\n</ol>\n<p>기존에도 HTTP 연결을 HTTPS로 리다이렉트 한다고 하더라도, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\" target=\"_blank\" rel=\"noreferrer noopener\">HSTS</a> 설정을 통해 반드시 HTTPS로만 통신하도록 강제할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 설정 파일 열기</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/nginx/sites-enabled/도메인 이름\n\n<span class=\"token comment\"># 'ssl_ciphers' 설정을 포함하는 서버 블록에 아래 라인 추가</span>\nadd_header Strict-Transport-Security <span class=\"token string\">\"max-age=31536000\"</span> always<span class=\"token punctuation\">;</span></code></pre></div>\n<p>기본적으로 위 헤더는 서브도메인에 대해선 적용되지 않습니다. 만약 서브도메인에도 HSTS를 적용하고 싶다면 <code class=\"language-text\">includeSubDomains</code> 값을 추가하면 됩니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">add_header Strict-Transport-Security <span class=\"token string\">\"max-age=31536000; includeSubDomains\"</span> always<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"레퍼런스\" style=\"position:relative;\"><a href=\"#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-label=\"레퍼런스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>레퍼런스</h2>\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\" target=\"_blank\" rel=\"noreferrer noopener\">How To Install Nginx on Ubuntu 20.04</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\" target=\"_blank\" rel=\"noreferrer noopener\">How To Secure Nginx with Let’s Encrypt on Ubuntu 20.04</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-20-04\" target=\"_blank\" rel=\"noreferrer noopener\">How To Set Up Nginx with HTTP/2 Support on Ubuntu 20.04</a></li>\n</ul>","frontmatter":{"title":"Ubuntu 20.04에서 Nginx 설치 및 설정하기","date":"April 21, 2022","category":"nginx"}}},"pageContext":{"slug":"/nginx/configure-nginx-on-ubuntu-2004/","previous":{"fields":{"slug":"/javascript/prevent-stack-overflow-in-js/"},"frontmatter":{"title":"자바스크립트에서 재귀호출로 인한 스택 오버플로우를 막는 방법"}},"next":{"fields":{"slug":"/nginx/nginx-architecture/"},"frontmatter":{"title":"NGINX의 아키텍처"}}}},"staticQueryHashes":[]}