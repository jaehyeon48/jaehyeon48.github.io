{"componentChunkName":"component---src-templates-blog-post-js","path":"/os/ipc/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"72b3ca97-da3c-5226-8ec4-39287507c2ec","excerpt":"여러 개의 프로세스가 동시에 실행되는 시스템에서, 프로세스를 크게 아래와 같이 두 분류로 나눌 수 있습니다: 독립 프로세스(independent process): 다른 프로세스와 데이터를 공유하지 않는 프로세스입니다. 협력 프로세스(cooperating process): 다른 프로세스에 의해 영향을 받거나, 다른 프로세스에 영향을 줄 수 있는 프로세스입니다. 이때, 아래와 같은 이유로 프로세스끼리 서로 협력할 수 있는 환경을 조성해줘야 합니다: 정보 공유(Information sharing…","html":"<p>여러 개의 프로세스가 동시에 실행되는 시스템에서, 프로세스를 크게 아래와 같이 두 분류로 나눌 수 있습니다:</p>\n<ul>\n<li><strong>독립 프로세스(independent process)</strong>: 다른 프로세스와 데이터를 공유하지 않는 프로세스입니다.</li>\n<li><strong>협력 프로세스(cooperating process)</strong>: 다른 프로세스에 의해 영향을 받거나, 다른 프로세스에 영향을 줄 수 있는 프로세스입니다.</li>\n</ul>\n<p>이때, 아래와 같은 이유로 프로세스끼리 서로 협력할 수 있는 환경을 조성해줘야 합니다:</p>\n<ul>\n<li><strong>정보 공유(Information sharing)</strong>: 여러 애플리케이션에서 동일한 데이터에 접근하고자 하는 경우가 있을 수 있습니다.</li>\n<li><strong>동작 속도 향상(Computation speedup)</strong>: 어떤 작업을 더 빠르게 수행하기 위해 작업을 세부 작업으로 나눠 병렬 처리 함으로써 성능을 증대할 수 있습니다.</li>\n<li><strong>모듈성(Modularity)</strong>: 시스템을 설계할 때 하나의 거대한 프로그램으로 구성하는 것이 아니라, 여러 개의 모듈로 나눠 구성함으로써 개발 효율을 향상하고 유지 보수를 좀 더 쉽게 할 수 있습니다.</li>\n</ul>\n<p>이처럼 협력 프로세스들끼리 서로 통신하기 위해 <strong>프로세스간 통신 (InterProcess Communication, IPC)</strong>이라는 메커니즘이 존재하는데, IPC를 하는 방법에는 두 가지 모델이 존재합니다:</p>\n<ul>\n<li><strong>공유 메모리(shared memory)</strong>: 협력 프로세스들끼리 메모리를 공유하여 사용하는 방식으로, 공유 메모리 영역에 읽기·쓰기 작업을 수행하여 데이터를 공유합니다. 중개자 없이 프로세스가 메모리에 직접 접근하기 때문에 속도가 빠르다는 장점이 있지만, 동기화(synchronization) 문제가 발생할 수 있어 이에 대한 처리가 필요합니다.</li>\n<li><strong>메시지 전달(message passing)</strong>: 메시지를 주고받는 방식으로 통신하는 방식입니다. 운영체제가 커널 내부에 메시지를 기록할 수 있는 공간(message queue)을 마련해 두고, 프로세스들이 적절한 시스템 콜을 이용해 메시지 송·수신을 운영체제에 요청하여 사용할 수 있도록 합니다.</li>\n</ul>\n<p align=\"center\">\n  <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/os/ipc/compare_ipc_method.png\" alt=\"IPC 방식 비교\">\n  </p><figcaption>IPC 방식 비교. 출처: Operating System Concepts (10th Edition)</figcaption>\n<p></p>\n<p>대부분의 운영체제는 위 두 방식을 모두 구현하고 있습니다. 이를 살펴봅시다.</p>\n<h2 id=\"공유-메모리-방식\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EC%9C%A0-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B0%A9%EC%8B%9D\" aria-label=\"공유 메모리 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>공유 메모리 방식</h2>\n<p><strong>공유 메모리(Shared Memory)</strong>를 이용하여 프로세스 간에 통신하는 방식은 여러 프로세스가 공유하여 사용하는 메모리 영역에 읽기·쓰기 작업을 수행하여 데이터를 주고받습니다. 공유 메모리는 방식은 프로세스가 커널의 중개 없이 직접 공유 메모리 영역에 접근할 수 있기 때문에 빠르다는 장점이 있습니다.</p>\n<h2 id=\"메세지-전달-방식\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%B8%EC%A7%80-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D\" aria-label=\"메세지 전달 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>메세지 전달 방식</h2>\n<p>메시지 전달 방식은 주소 공간을 공유하지 않고 협력 프로세스끼리 통신할 수 있도록 하는 방식으로, 통신하는 프로세스들이 서로 다른 컴퓨터에 존재하는 분산형 시스템에 특히 적합한 방식입니다.</p>\n<p>메시지 전달 방식엔 최소한 메시지를 전송하는 동작 (<code class=\"language-text\">send(message)</code>)과 수신하는 동작 (<code class=\"language-text\">receive(message)</code>)이 제공되는데, 이때 주고받는 메시지의 크기는 고정 길이일 수도, 가변 길이일 수도 있습니다.</p>\n<p>두 프로세스 A, B가 서로 통신하고자 할 때, 두 프로세스 간에는 반드시 <strong>통신 링크(communication link)</strong>가 존재해야 합니다. 통신 링크의 논리적인 구현 방법으로는 아래와 같은 방법들이 있습니다.</p>\n<ul>\n<li>직접(Direct) 혹은 간접(Indirect) 통신.</li>\n<li>동기(Synchronous) 혹은 비동기(Asynchronous) 통신.</li>\n<li>자동(Automatic) 혹은 명시적(Explicit) 버퍼링.</li>\n</ul>\n<p>이와 관련된 내용들을 하나씩 살펴봅시다.</p>\n<h3 id=\"네이밍naming\" style=\"position:relative;\"><a href=\"#%EB%84%A4%EC%9D%B4%EB%B0%8Dnaming\" aria-label=\"네이밍naming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>네이밍(Naming)</h3>\n<p><strong>직접 통신</strong> 방법을 사용하는 경우, 각 프로세스는 반드시 상대방의 <em>이름</em>을 명시해야 합니다. 이 방식에서 <code class=\"language-text\">send()</code>와 <code class=\"language-text\">receive()</code>는 아래와 같이 정의됩니다:</p>\n<ul>\n<li><code class=\"language-text\">send(A, message)</code>: 프로세스 A에 메시지 전송.</li>\n<li><code class=\"language-text\">receive(B, message)</code>: 프로세스 B로부터 메시지 수신.</li>\n</ul>\n<p>네이밍 방식에서 통신 링크는 아래와 같은 특성을 보입니다:</p>\n<ul>\n<li>통신을 원하는 모든 프로세스 쌍(pair) 사이에 자동으로 링크가 형성됩니다. 프로세스는 통신하고자 하는 상대방의 신원(identity)만 알면 됩니다.</li>\n<li>하나의 링크는 오직 두 프로세스만을 연결합니다. 또한 각 프로세스 쌍 사이에는 오직 하나의 링크만 존재합니다.</li>\n</ul>\n<p>이 기법은 addressing 방식에서 대칭성(symmetry)을 보입니다. 즉, 통신하기 위해선 전송자와 수신자 모두 상대방의 이름을 명시해야만 하죠. 반대로, 비대칭적(asymmetry)인 addressing 방식을 사용하는 기법의 경우 전송자만 상대방의 이름을 명시하고, 수신자는 상대방의 이름을 명시하지 않아도 됩니다. 이러한 방식에선 <code class=\"language-text\">send()</code>와 <code class=\"language-text\">receive()</code>는 아래와 같이 정의됩니다:</p>\n<ul>\n<li><code class=\"language-text\">send(A, message)</code>: 프로세스 A에게 메시지 전송.</li>\n<li><code class=\"language-text\">receive(id, message)</code>: 아무 프로세스로부터 메시지를 수신. 변수 <code class=\"language-text\">id</code>는 통신을 발생시킨 프로세스의 이름으로 설정됨.</li>\n</ul>\n<p>하지만 이러한 방식(대칭·비대칭 모두)은 모듈성이 제한된다는 단점이 있습니다. 예를 들어 프로세스의 이름을 바꾸는 경우, 다른 프로세스에 정의된 이전의 이름을 모두 찾아서 바꿔야만 합니다. 이처럼 식별자를 하드 코딩 방식은 곧이어 살펴볼 간접 통신 방법에 비해 그리 바람직하진 않습니다.</p>\n<hr />\n<p><strong>간접 통신</strong> 방식에선 <strong>메일 박스</strong> 혹은 <strong>포트</strong>를 통해 메시지를 주고받습니다. 이때 메일 박스란 추상적으로 프로세스가 메시지를 저장하고 지우는 객체라고 볼 수 있습니다. 각 메일 박스엔 고유 id가 있으며, 한 프로세스는 여러 개의 메일 박스를 통해 다른 프로세스와 통신할 수 있지만, 어떤 두 프로세스가 통신할 땐 두 프로세스가 공유하는 메일 박스를 통해서만 이뤄집니다.</p>\n<p align=\"center\">\n  <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/os/ipc/ipc_using_mailbox.png\" alt=\"메일 박스를 이용한 IPC 방식\">\n  </p><figcaption>메일 박스를 이용한 IPC 방식. 출처: Operating System Concepts (9th Edition)</figcaption>\n<p></p>\n<p>이 방식에서 <code class=\"language-text\">send()</code>와 <code class=\"language-text\">receive()</code>는 아래와 같이 정의됩니다:</p>\n<ul>\n<li><code class=\"language-text\">send(A, message)</code>: <code class=\"language-text\">A</code> 메일 박스에 메시지 전송.</li>\n<li><code class=\"language-text\">receive(A, message)</code>: <code class=\"language-text\">A</code> 메일 박스로부터 메시지 수신.</li>\n</ul>\n<p>메일 박스 방식에서 통신 링크는 아래와 같은 특성을 보입니다:</p>\n<ul>\n<li>통신하고자 하는 프로세스들이 특정 메일 박스를 공유하는 경우에만 링크가 형성됩니다.</li>\n<li>한 링크는 두 개 이상의 프로세스에 연결될 수 있습니다.</li>\n<li>한 프로세스 쌍 사이에는 여러 개의 서로 다른 링크가 존재할 수 있으며, 각 링크는 하나의 메일 박스에 대응됩니다.</li>\n</ul>\n<p>프로세스 <code class=\"language-text\">P1</code>, <code class=\"language-text\">P2</code>, <code class=\"language-text\">P3</code>가 메일 박스 <code class=\"language-text\">A</code>를 공유한다고 해봅시다. <code class=\"language-text\">P1</code>이 메일 박스 <code class=\"language-text\">A</code>에 메시지를 전송하고, <code class=\"language-text\">P2</code>, <code class=\"language-text\">P3</code>가 <code class=\"language-text\">A</code>에 대해 <code class=\"language-text\">receive()</code>를 호출했다면, <code class=\"language-text\">P2</code>와 <code class=\"language-text\">P3</code> 중 어느 프로세스가 메시지를 수신하도록 해야 할까요? 이 문제는 아래와 같은 방법으로 해결할 수 있습니다:</p>\n<p align=\"center\">\n  <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/os/ipc/multiple_receivers.png\" alt=\"하나의 메일 박스를 통해 여러 수신자가 메시지를 수신하고자 하는 경우\">\n  </p><figcaption>하나의 메일 박스를 통해 여러 수신자가 메시지를 수신하고자 하는 경우.</figcaption>\n<p></p>\n<ul>\n<li>한 링크에 최대 두 개의 프로세스가 연결되도록 하여 문제를 해결.</li>\n<li>한 번에 단 하나의 프로세스만 <code class=\"language-text\">receive()</code>를 수행할 수 있도록 하여 문제를 해결.</li>\n<li>시스템이 라운드 로빈 같은 알고리즘을 이용하여 어느 프로세스가 수신할지를 결정. 이때 전송자 누가 메시지를 수신했는지 알림.</li>\n</ul>\n<p>메일 박스는 프로세스 혹은 운영 체제가 소유할 수 있습니다.</p>\n<ul>\n<li>프로세스가 메일 박스를 소유하는 경우(즉, 메일 박스가 프로세스의 주소 공간에 포함되는 경우), 오직 해당 메일 박스를 통해 수신만 할 수 있는 소유자와 해당 메일 박스로 전송만 할 수 있는 사용자를 구분하게 됩니다. 이 상황에선 각 메일 박스마다 고유의 소유자가 있기 때문에 어느 프로세스가 메시지를 수신해야 할지를 결정할 필요가 없습니다. 그리고 메일 박스를 소유하는 프로세스가 종료되면 메일 박스도 같이 사라지는데, 이때 다른 프로세스에도 해당 메일 박스가 사라졌다는 사실을 알려줘야 합니다.</li>\n<li>\n<p>반대로 운영 체제가 메일 박스를 소유하는 경우, 해당 메일 박스는 어느 프로세스에도 속하지 않으며 운영 체제는 반드시 프로세스에게 아래의 기능을 제공해야 합니다:</p>\n<ul>\n<li>새로운 메일 박스를 생성하는 기능.</li>\n<li>메일 박스로 메시지를 전송하는 기능과 메일 박스를 통해 메시지를 수신하는 기능.</li>\n<li>메일 박스를 삭제하는 기능.</li>\n</ul>\n</li>\n</ul>\n<p>운영 체제가 제공하는 기능을 통해 메일 박스를 생성한 프로세스는 자연스레 해당 메일 박스의 소유자가 됩니다. 처음엔 해당 프로세스만 메일 박스를 통해 메시지를 수신할 수 있지만, 이후 시스템 콜을 통해 다른 프로세스에게 소유권이 넘어가도록 할 수도 있습니다.</p>\n<h3 id=\"동기화synchronization\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94synchronization\" aria-label=\"동기화synchronization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>동기화(Synchronization)</h3>\n<p>메시지 전달 방식은 동기 혹은 비동기로 동작할 수 있습니다:</p>\n<ul>\n<li>\n<p><strong>blocking</strong> 방식은 동기적인 방식으로,</p>\n<ul>\n<li><strong>blocking send</strong>는 수신자가 메시지를 수신할 때까지 전송자의 상태를 blocked로 유지합니다.</li>\n<li><strong>blocking receive</strong>는 수신할 메시지가 있을 때까지 수신자의 상태를 blocked로 유지합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>non-blocking</strong> 방식은 동기적인 방식으로,</p>\n<ul>\n<li><strong>non-blocking send</strong>는 전송자가 메시지를 보낸 뒤 하던 작업을 이어서 수행합니다.</li>\n<li><strong>non-blocking receive</strong>는 수신자가 유효한 메시지를 받도록 하거나, 받을 메시지가 없으면 <code class=\"language-text\">null</code>을 받도록 합니다.</li>\n</ul>\n</li>\n</ul>\n<p>이때, 전송자와 수신자 모두 동기식으로 동작하는 경우 이를 <strong>랑데뷰(rendezvous)</strong> 방식이라고 하는데, 이는 아래의 버퍼링 섹션에서 다시 살펴보겠습니다.</p>\n<h3 id=\"버퍼링buffering\" style=\"position:relative;\"><a href=\"#%EB%B2%84%ED%8D%BC%EB%A7%81buffering\" aria-label=\"버퍼링buffering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>버퍼링(Buffering)</h3>\n<p>직접 통신이든 간접 통신이든 상관없이, 두 프로세스가 주고받는 메시지들은 임시 큐(버퍼)에 저장됩니다. 이때 큐는 세 가지 방식으로 구현될 수 있습니다:</p>\n<ul>\n<li><strong>큐의 크기가 0인 경우</strong>: 큐의 크기가 0이므로 메시지를 보관할 수 없습니다. 따라서 전송자는 수신자가 메시지를 받을 때까지 반드시 blocked 상태를 유지해야 합니다 (즉, 전송자가 동기식으로 동작해야 합니다). 앞서 말한 랑데뷰 방식이 이에 해당합니다.</li>\n<li><strong>큐의 크기가 n인 경우</strong>: 큐의 크기가 n이라는 것은 최대 n개의 메시지를 보관할 수 있다는 말이므로, 새로운 메시지가 도착했을 때 큐가 꽉 차지 않았다면 전송자는 비동기식으로 동작할 수 있습니다. 반대로 큐가 꽉 찬 경우 전송자는 큐에 빈 공간이 날 때까지 동기적으로 동작해야 합니다.</li>\n<li><strong>큐의 크기가 무한대인 경우</strong>: 큐의 크기가 무한이므로 전송자는 항상 비동기식으로 동작할 수 있습니다.</li>\n</ul>\n<p align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/os/ipc/blocking_send.png\" alt=\"동기식(blocking) 전송 동작 방식\">\n    </p><figcaption>동기식(blocking) 전송 동작 방식.</figcaption>\n<p></p>\n<p align=\"center\">\n    <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io@master/assets/images/os/ipc/non_blocking_send.png\" alt=\"비동기식(Non-blocking) 전송 동작 방식\">\n    </p><figcaption>비동기식(Non-blocking) 전송 동작 방식.</figcaption>\n<p></p>\n<h2 id=\"레퍼런스\" style=\"position:relative;\"><a href=\"#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-label=\"레퍼런스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>레퍼런스</h2>\n<ul>\n<li><a href=\"https://www.amazon.com/Operating-System-Concepts-Abraham-Silberschatz/dp/1119800366/ref=sr_1_1?keywords=operating+system+concepts&#x26;qid=1649684419&#x26;s=books&#x26;sprefix=operating+system%2Cstripbooks-intl-ship%2C348&#x26;sr=1-1\" target=\"_blank\" rel=\"noreferrer noopener\">Operating System Concepts (10th Edition) - Abraham Silberschatz, Greg Gagne, Peter B. Galvin</a></li>\n</ul>","frontmatter":{"title":"프로세스간 통신, IPC","date":"March 18, 2021","category":"OS"}}},"pageContext":{"slug":"/os/ipc/","previous":{"fields":{"slug":"/os/process-scheduling/"},"frontmatter":{"title":"프로세스 스케줄링"}},"next":{"fields":{"slug":"/web/cors-on-local-environment/"},"frontmatter":{"title":"로컬 환경에서의 CORS 문제 해결"}}}},"staticQueryHashes":[]}