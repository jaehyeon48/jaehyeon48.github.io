{"componentChunkName":"component---src-templates-blog-post-js","path":"/os/system-call/","result":{"data":{"site":{"siteMetadata":{"title":"Jaehyeon's Dev Blog","author":"Jaehyeon Kim","siteUrl":"https://jaehyeon48.github.io","comment":{"disqusShortName":"","utterances":"jaehyeon48/blog-comments"}}},"markdownRemark":{"id":"659694e6-a02a-5b46-8677-f2465d656f31","excerpt":"시스템 콜(system call)이란, 유저 프로그램이 운영체제의 기능들을 사용할 수 있게 해주는 (운영체제가 제공하는) 일종의 인터페이스 이다. 한 파일의 데이터를 읽고, 그 내용을 다른파일에 복사하는 프로그램을 생각해 보자. 프로그램에게 입력 파일과 출력 파일의 이름들을 전달해줘야 할 것이다. 이 때, UNIX…","html":"<ul>\n<li><strong>시스템 콜(system call)</strong>이란, 유저 프로그램이 운영체제의 기능들을 사용할 수 있게 해주는 (운영체제가 제공하는) 일종의 인터페이스 이다.</li>\n<li>한 파일의 데이터를 읽고, 그 내용을 다른파일에 복사하는 프로그램을 생각해 보자. 프로그램에게 입력 파일과 출력 파일의 이름들을 전달해줘야 할 것이다. 이 때, UNIX <code class=\"language-text\">cp</code> 명령을 이용하여 <code class=\"language-text\">in.txt</code> 파일을 <code class=\"language-text\">out.txt</code>파일로 복사한다고 하자:</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cp in.txt out.txt</code></pre></div>\n</li>\n<li>또는, 프로그램이 유저에게 창을 띄워 파일 이름을 입력하도록 할 수도 있을 것이다. 이 방법은 화면에 프롬프트 메세지를 띄우는 시스템 콜과, 키보드로 부터 파일 이름을 받는 시스템 콜을 사용할 것이다. 혹은, (윈도우에서와 같이) 마우스와 아이콘을 이용하는 방법도 있을 것이다. 이 경우에도 여러 I/O 시스템 콜을 사용하게 된다.</li>\n<li>입력 파일과 출력 파일의 이름을 입력받았다면, 프로그램은 먼저 입력 파일을 열고(open), 출력 파일을 생성하여 열 것이다. 이러한 각각의 동작들은 시스템 콜을 사용해야 한다. 만약 입력 파일을 여는데 에러가 발생한다면 에러 메세지를 띄우고 (시스템 콜 호출), 프로그램을 비정상적으로 종료해야할 것이다 (또 다른 시스템 콜 호출). 마찬가지로, 출력파일의 이름이 중복될 경우 프로그램을 중단시킬 수도 있고 (시스템 콜 호출), 또는 기존의 파일을 지우고 (시스템 콜 호출) 새로운 파일을 만들 수도 있다 (시스템 콜 호출). 혹은 사용자에게 프롬프트 메세지를 띄워 (시스템 콜 호출) 어떤 동작을 수행할 것인지 물어볼 수도 있다.</li>\n<li>이러한 일련의 과정들을 마치고 나면, 반복문을 통해 입력 파일을 읽어 나가면서 (시스템 콜 호출) 출력 파일에 내용을 기록할 것이다 (시스템 콜 호출). 마지막으로, 입력 파일의 모든 내용이 복사되고 나면 프로그램은 두 파일을 닫고 (두 번의 시스템 콜), 콘솔창이나 화면에 결과를 띄우고 (시스템 콜), 마지막으로 정상적으로 프로그램을 종료할 것이다 (마지막 시스템 콜). 이러한 과정이 다음 그림에 나와있다.</li>\n</ul>\n<p align=\"center\">\n  <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io/assets/images/os/how_sys_calls_are_used.png\" alt=\"Example of how system calls are used.\">\n</p>\n<h2 id=\"api-application-programming-interface\" style=\"position:relative;\"><a href=\"#api-application-programming-interface\" aria-label=\"api application programming interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>API, Application Programming Interface</h2>\n<ul>\n<li>위에서 본것과 같이, 단순한 프로그램 조차 (엄청나게) 많은 시스템 콜을 사용한다. 종종 시스템은 1초당 수천번의 시스템 콜을 호출하는데, 대부분의 프로그래머들은 이러한 디테일까지 알 필요는 없다. 대신, 프로그래머들은 <strong>API</strong>를 이용하여 개발을 하는데, API는 어떤 두 프로그램이 서로 소통하는 일종의 소통창구 라고 할 수 있다.</li>\n<li>프로그래머들은 이러한 API를 통해 시스템 콜을 더 간편하게 사용할 수 있다. 예를 들어, 윈도우즈에서 새로운 프로세스를 생성하고자 한다면 <code class=\"language-text\">CreateProcess()</code>라는 API 함수를 이용하여 생성할 수 있다. 이 함수를 호출하게 되면 함수 내부에서 실제로 <code class=\"language-text\">NTCreateProcess()</code>라는 시스템 콜을 호출하여 프로세스를 생성한다.</li>\n<li>\n<p>이렇게 실제 시스템 콜을 호출하는 대신 굳이 API를 사용하는 이유는,</p>\n<ul>\n<li>이식성(portability)이 좋기 때문이다. 프로그래머가 API를 사용하여 프로그램을 작성하면 같은 API를 지원하는 시스템에서는 정상적으로 동작할 것이라고 예측할 수 있다.</li>\n<li>또한, 실제 시스템 콜은 대게 API 보다 더 복잡하고 (프로그래머 입장에서) 다루기 어렵기 때문이다.</li>\n</ul>\n</li>\n</ul>\n<hr />\n<ul>\n<li>시스템 콜을 처리하는데 있어 또 다른 중요한 요인은 바로 <strong>런타임(RTE, RunTime Environment)</strong> 이다. RTE는 프로그램의 실행환경으로서, 프로그램을 실행하는데 필요한 모든 것 (라이브러리 파일, 메모리 및 기타 시스템 리소스 등)을 포함한다. RTE에는 <strong>system-call interface</strong>가 존재하는데, API에서 시스템 콜을 호출하면 이 인터페이스가 API로 부터 해당 콜을 intercept 하여 실제 시스템 콜을 호출한다.</li>\n<li>대게 각 시스템 콜은 특정한 숫자와 매핑되어 있고, 시스템 콜 인터페이스는 이러한 숫자를 통해 인덱싱 할 수 있는 테이블을 가지고 있다 (Interrupt vector와 비슷하다). 시스템 콜 인터페이스는 이 테이블에서 알맞는 시스템 콜을 호출하고, 시스템 콜의 상태(status)를 반환한다.</li>\n<li>시스템 콜을 호출하는 호출자는 어떻게 시스템 콜이 구현되어 있고 시스템 콜 실행중에 무엇을 하는지 알 필요는 없다. 대신, API 사용 규칙을 준수하고, 해당 시스템 콜을 호출하게 되면 시스템 콜의 결과로 어떤 일이 발생하는지에 대해서만 알면 된다. 이러한 API와 시스템 콜 인터페이스, 그리고 운영체제 간의 관계는 그림 2.6에 나와있다. 이 그림에서는 사용자 프로그램이 <code class=\"language-text\">open()</code> 시스템 콜을 호출하게 되면 어떤 일이 발생하는지 나타내고 있다.</li>\n</ul>\n<p align=\"center\">\n  <img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io/assets/images/os/relationship_api_system_call_os.png\" alt=\"The handling of a user application invoking the open() system call.\">\n</p>\n<ul>\n<li>\n<p>시스템 콜을 사용할 때에는 종종 더 많은 정보를 제공해야할 때가 있다. 즉, 인자를 넘겨야할 때가 있는데 보통 운영체제에게 인자를 넘기는 방법으로는 다음의 세 가지가 주로 사용된다:</p>\n<ul>\n<li>가장 단순한 방법은 인자를 레지스터에 저장하는 것이다.</li>\n<li>하지만 레지스터의 수 보다 인자의 수가 더 많은 경우, 혹은 인자의 크기가 레지스터보다 큰 경우가 존재할 수 있는데, 이러한 경우 인자들을 블록단위로 묶어서 메모리에 저장하여, 이 메모리의 주소를 레지스터에 저장함으로써 인자를 전달한다 (그림 2.7 참고).</li>\n<li>\n<img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io/assets/images/os/passing_param_as_a_block.png\" alt=\"Passing of parameters as a table.\">\n</li>\n<li>마지막 방법은, 스택에다가 인자들을 저장(push)하여, 레지스터로 하여금 인자가 저장된 메모리를 가리키게 하지 않고, 운영체제가 스택에 저장된 인자들을 바로 꺼내어(pop) 사용하는 방법이다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"시스템-콜의-종류들-types-of-system-calls\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C%EC%9D%98-%EC%A2%85%EB%A5%98%EB%93%A4-types-of-system-calls\" aria-label=\"시스템 콜의 종류들 types of system calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"18\" height=\"18\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"link\" viewBox=\"0 0 512 512\"><path fill=\"#05b166\" d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"></path></svg></a>시스템 콜의 종류들 (Types of System Calls)</h2>\n<ul>\n<li>\n<p>시스템 콜은 크게 여섯가지 카테고리로 분류할 수 있다:</p>\n<ul>\n<li><strong>프로세스 컨트롤(process control)</strong>: 프로세스 생성/파괴/실행, event 기다리기, 에러 발생시 메모리 덤프 등등</li>\n<li><strong>파일 관리(file management)</strong>: 파일 생성/삭제, 파일 열기/닫기, 파일 읽기/쓰기, 파일 특성(file attributes) get/set 등등</li>\n<li><strong>장치 관리(device management)</strong>: 장치 요청/릴리즈, 장치 읽기/쓰기, 장치 특성 get/set 등등</li>\n<li><strong>정보 유지(information maintenance)</strong>: 시간(혹은 날짜) get/set, 시스템 데이터 get/set 등등</li>\n<li><strong>통신(communications)</strong>: 통신연결 (communication connection) 생성/삭제, 데이터 전송/수신 등등</li>\n<li><strong>보호(protection)</strong>: 자원에 대한 접근 컨트롤, permission get/set, 사용자의 엑세스 allow/deny 등등.</li>\n</ul>\n</li>\n<li>\n<p>윈도우즈와 UNIX의 시스템 콜 예시들은 다음과 같다:</p>\n<ul>\n<li>\n<img src=\"https://cdn.jsdelivr.net/gh/jaehyeon48/jaehyeon48.github.io/assets/images/os/examples_of_sys_calls.png\" alt=\"Examples of windows/unix system calls\">\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"시스템 콜","date":"March 21, 2021","category":"OS"}}},"pageContext":{"slug":"/os/system-call/","previous":{"fields":{"slug":"/os/os-introduction/"},"frontmatter":{"title":"운영 체제란?"}},"next":{"fields":{"slug":"/os/what-is-interrupt/"},"frontmatter":{"title":"인터럽트"}}}},"staticQueryHashes":[]}